<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.1" created="2013-04-03 04:57" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Garbled</title>
	<link>http://garbled.benhamill.com</link>
	<description>garbled = Blog.new(:author =&#62; &#039;Ben Hamill&#039;)</description>
	<pubDate>Wed, 03 Apr 2013 04:57:26 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://garbled.benhamill.com</wp:base_site_url>
	<wp:base_blog_url>http://garbled.benhamill.com</wp:base_blog_url>

	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>benhamill</wp:author_login><wp:author_email>ben@benhamill.com</wp:author_email><wp:author_display_name><![CDATA[benhamill]]></wp:author_display_name><wp:author_first_name><![CDATA[Ben]]></wp:author_first_name><wp:author_last_name><![CDATA[Hamill]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>31</wp:term_id><wp:category_nicename>arch-linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[arch linux]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>28</wp:term_id><wp:category_nicename>austin-on-rails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[austin on rails]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>19</wp:term_id><wp:category_nicename>code</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[code]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>30</wp:term_id><wp:category_nicename>dominion</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[dominion]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>email</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[email]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>26</wp:term_id><wp:category_nicename>fyi</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[fyi]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>git</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[git]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>29</wp:term_id><wp:category_nicename>google-wave</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[google wave]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>gurps</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[gurps]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>25</wp:term_id><wp:category_nicename>heygovote</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[heygovote]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>24</wp:term_id><wp:category_nicename>identity</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[identity]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>meta</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[meta]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>21</wp:term_id><wp:category_nicename>naval-gazing</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[naval gazing]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>os</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[os]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>otherinbox</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[otherinbox]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>11</wp:term_id><wp:category_nicename>philosophy</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[philosophy]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>32</wp:term_id><wp:category_nicename>politics</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[politics]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename>programming</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[programming]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>projects</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[projects]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>18</wp:term_id><wp:category_nicename>rails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rails]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>rants</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rants]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>15</wp:term_id><wp:category_nicename>rpg</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rpg]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>ruby</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ruby]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>23</wp:term_id><wp:category_nicename>security</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[security]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>tips</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[tips]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>22</wp:term_id><wp:category_nicename>tutorial</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[tutorial]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>20</wp:term_id><wp:category_nicename>twitter</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[twitter]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>27</wp:term_id><wp:category_nicename>vim</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[vim]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>windows</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[windows]]></wp:cat_name></wp:category>

	<generator>http://wordpress.org/?v=3.5.1</generator>

	<item>
		<title>About</title>
		<link>http://garbled.benhamill.com/about/</link>
		<pubDate>Tue, 23 Mar 2010 03:35:55 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

Ben Hamill is a programmer that was born (13 Feb, 1982) and now  lives in Austin, Texas. For a while, he lived in Dallas and doesn’t  recommend the idea to anyone. He loves Ruby and is exploring Rails. He  likes all sorts of nerdy games: role playing, video, board and card. He enjoys  novels and comic books, well designed things and whimsy. His Discordian  holy name is His Holiness Hery Fnord Episkopos of the Society for  Creative Anarchisms, Destroyer of Tuples and <em>Really Strong</em>. The  crest of the Hamill family is azure, two bars ermine.

Ben’s blog, Garbled, is about Ruby, Rails, programming and related  topics. Occasionally, a tangential, nerdy topic might pop up here, like  role playing games or philosophy; comic books or politics. Feel free to  skip anything on a topic you don’t care about.

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2010-03-23 03:35:55</wp:post_date>
		<wp:post_date_gmt>2010-03-23 03:35:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Blog</title>
		<link>http://garbled.benhamill.com/2008/12/new-blog/</link>
		<pubDate>Sat, 13 Dec 2008 12:00:39 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[Well, I finally got this thing working. Don't book mark it yet, I plan on changing the URL over, but have to deal with registration transfer, etc. and don't feel like mucking with that yet. Please, if you like, comment on the aesthetics or if you notice anything doesn't work.

I've got the source code for this blog up on <a href="http://github.com">GitHub</a>, which you can check out <a href="http://github.com/BenHamill/garbled/tree/master">if you like</a>. I'm sure people will say that I've got some stuff in source control that I shouldn't. If you post something like that in the comments, I'll at least have a look at it and consider. Deploying's a pain if you leave important stuff out of version control, no?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2008-12-13 12:00:39</wp:post_date>
		<wp:post_date_gmt>2008-12-13 12:00:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="meta"><![CDATA[meta]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sudo on Windows XP... Sort of</title>
		<link>http://garbled.benhamill.com/2008/12/sudo-on-windows-xp-sort-of/</link>
		<pubDate>Tue, 16 Dec 2008 13:36:51 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[I'm mostly posting this to document it to myself, since I always forget, but it might be helpful to any readers, as well. You generally don't want to be logging in to your computer as a user with admin privileges and a sane OS (like Mac OS or Linux), makes it a fairly painless experience. Windows, on the other hand, can be a real bear on the point. Specifically, Windows Explorer doesn't like to do the whole "Run as..." thing. I've discovered a wonderful little run line that will solve this problem.

In the run line (Windows key, then R or click Start menu then Run...) put in <code>runas /u:administrator "explorer.exe /separate"</code>. You'll want to replace <code>administrator</code> with an appropriate user name if that's not a valid one. A DOS prompt will appear asking for the password and away you go. This tip thanks to <a href="http://stackoverflow.com/questions/13805/opening-explorer-shell-with-admin-priveleges-on-xp-with-ie7-installed">Stack Overflow</a>.

I also found something else handy <a href="http://pcwizkid.blogspot.com/2008/03/create-shorcuts-of-hidden-commands-in.html">here</a>: You can input run-line commands into the "location" prompt when creating a shortcut from scratch in Windows. So if you don't want to type out all that /u:administrator stuff all day (or, well, probably not that frequently and you'd forget it), then you can right-click &gt; New &gt; shortcut and paste your command into the location. Call it whatever you want and then you've got a shortcut to an admin Windows Explorer right on your desktop.

I find this so much easier to deal with than any other solution when I need to muck with file permissions or any number of things in Windows. Helpful? Didn't work for you? Thoughts on the site design? Let me know in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2008-12-16 13:36:51</wp:post_date>
		<wp:post_date_gmt>2008-12-16 13:36:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sudo-on-windows-xp-sort-of</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="os"><![CDATA[os]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="windows"><![CDATA[windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Hub for Gits</title>
		<link>http://garbled.benhamill.com/2008/12/a-hub-for-gits/</link>
		<pubDate>Tue, 16 Dec 2008 23:57:26 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[I've recently started using git to version control my personal projects. I've also recently started using GitHub for hosting remote repos of that stuff. So I'm new to it all and I might be wrong, here. But, having read a few articles here and there and talked to some other people (most notably, another git newbie @<a href="http://twitter.com/carl_youngblood">carl_youngblood</a>), aren't cherry picking and rebasing really, really horrible things to do to a repo? Even if it's just your local one? They destroy history, which is sort of the point of version control, no?

I've seen, in the last few days, <a href="http://github.com/blog/270-the-fork-queue">two</a> <a href="http://schacon.github.com/history.html">articles</a> on GitHub that make me wonder which of us (me or GitHub) doesn't get it. My inclination is to assume it's me who's missing something. If so, I'd love for someone to tell me exactly where I've missed a step.

The first article I want to talk about is the <a href="http://github.com/blog/270-the-fork-queue ">Fork Queue</a> announcement. It's basically a tool that makes it really easy to see which of the people that've forked your project have pushed commits you don't have in your repo and then to cherry pick them in. You can pick your branch, etc. This is to keep you from having to create a lot of remotes, I guess. It's supposed to "[allow] you to do a email patch style workflow without actually having to deal with patches over email". I thought that part of the point was that that work-flow was a pain? I also feel like it's missing the part where the person making the patch tells you about it, rather than you going and getting it from them. A pull-request is much more like that.

I don't know... I sort of feel like we should be putting roadblocks in the way of cherry picking; make it harder for people to adopt work-flows where cherry-picking is common. My understanding (and again let me stress that this may be incorrect) is that the <strong>best</strong> work-flow is for the patcher to fetch your code (because it represents some kind of "core" or "official" release, yes?), merge it into a new branch, make his(her, etc.) changes, test them, fetch your code again to make sure he has the latest, perhaps retest, then issue a pull request. When you're acting on the pull request, you fetch his stuff down to a new branch, test, possibly merge in any changes you've made to master since he issued the pull request, then _merge_ into master. This preserves all the history. It's all fetches and merges.

So the other article is the <a href="http://schacon.github.com/history.html">Changing Git History</a> article. This one is about going and messing with old commits. I'll try not to rant as much on this one. I'm not as adamant, but I do find it kind of silly, this idea of making a commit a perfect little gem. I can see fixing a typo in the commit you just made, so <code>git commit --amend</code> doesn't seem so bad. However, the <code>git rebase -i</code> portion after that... bleh. I realize this isn't a GitHub feature like the above; it's a part of Git, but I wonder why. If the commits were that horrible, revert them all and do it over. If they weren't that bad, just live with the typo. No? Even if you haven't pushed it, rebasing just seem icky and to be avoided, especially if it's just to fix commit messages.

Okay... So, maybe I'm out of line or off base or insane. It's entirely possible. Some would say probable. It wouldn't surprise me if I've failed in some very basic way to understand the Git philosophy. It also might be that I've misunderstood what GitHub's written and that the clash between these articles and Git philosophy is all imagined by me. I'm open to these possible realities. Correct me or soliloquize or slam me in the comments, if you like. I am all ears... or eyes. Whatever.

<strong>Update:</strong> Before anyone gets the wrong idea, here... I've been loving using git and GitHub. They're both spectacular. Without them, I wouldn't have found enki for use in powering this blog. This post is about trying to understand something confusing in something great; I'm not trying to imply that either should be done away with or that I could do better. I just wanted to head off the most major take-it-the-wrong-way that occurred to me on the way in this morning.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2008-12-16 23:57:26</wp:post_date>
		<wp:post_date_gmt>2008-12-16 23:57:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-hub-for-gits</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="philosophy"><![CDATA[philosophy]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OtherInbox Is For Email From Computers</title>
		<link>http://garbled.benhamill.com/2008/12/otherinbox-is-for-email-from-computers/</link>
		<pubDate>Tue, 23 Dec 2008 21:35:32 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[So I use this great thing called <a href="http://otherinbox.com">OtherInbox</a>. They're in closed beta just now, but if you <a href="http://twitter.com/otherinbox">follow them on Twitter</a> you're likely to see when they hand out another round of invites (which they recently tweeted would be coming early in January, if I remember right). Let me tell you a bit about OI before I go into my rant. Hopefully it will segue nicely.

OtherInbox is an email, uh... application. Like Gmail or Hotmail, sort of. When you sign up for OI, though, you don't get _username_@otherinbox.com, you get a whole subdomain and infinite email addresses at it. So, _whateveryouwant_@_username_.otherinbox.com. Then, when you login to your account, you're presented with folders based on the email address that the email came to. It's sort of like filters in other email clients, except you don't have to set them up, you just hand out a new email address. So if I sign up for a new site, I hand it _sitename_@_username_.otherinbox.com and when they send me email, it automatically goes to a folder in my OI named after that site. So I have an Amazon folder and a Twitter folder, etc. etc.

You can also have a vanity URL and edit your MX records on the host so that email gets routed to OI's servers, so that you don't have to use the long _username_.otherinbox.com in your emails. So I have benhamill.com set up that way. Very, very nice feature, that.

Okay, so why might you want this service? Well, spam, firstly. If I've only ever given a certain email address away to amazon.com and I start getting spam to that address, I know who the culprit is. Also, if I want to sign up for something that I expect to get spam from, I can do so without fear. After getting that confirmation email, I can just hit the "Block All" button and OI will just not show me those messages. I don't have to worry about it ever again.

Another use case which I'm loving is when you sign up for what's called bacn; stuff you want, but not, you know, right now. I use OI to sign up for email lists and such that I don't want cluttering up my inbox. Stuff I might want to read, but over the weekend or whatever; stuff that's not time-sensitive.

Which leads me to my rant. If you're not an OtherInbox user, the following might not make a lot of sense, so you might want to skip it until you are. And I highly recommend you become one. I found that the more I used it, the more I liked it. So, rant on...

OtherInbox is <strong>not your primary inbox</strong>. It's right there in the name. I was confused about this at first, too, but it should be obvious. You don't ditch gmail for OI. You use them both. How you divide it up is something people do differently, but here's my rule of thumb: If it is sent by a computer (as opposed to a human), it goes to OI. What this does (ideally, since I haven't finished converting all my accounts over to OI addresses) is makes it such that the only emails that show up in my gmail account are ones that are actually to me.

I mean--how many emails do you get from computers? If you're like me then a lot. I get email every time someone follows me on Twitter and every time someone sends me a message in my online Diplomacy game and every month when Rock Band sends out their "zine". Why not have a computer help me deal with it all? It's not going to read it for me, of course, but it _will_ help me process them. If I know I ordered something from Amazon, then I will look at new emails to my amazon address when they show up. Otherwise, I'll probably ignore it.

However, OI is pretty bad at displaying conversations. I mean--that's not a fault, that's not part of their core mission. They've been talking about adding a feature like that since it makes sense for mailing lists, but for personal email, gmail is still king. Tags and search and conversation view, etc. That's what gmail is good at. OI is good at sorting spam and bacn.

People who talk about having their friends each email an OI address based on their name just confuse me. Your friends aren't going to sell your email address to spammers or send you stuff you don't want to read (or, if they are, get new friends... elderly relatives, on the other hand, who will send you random jokes might warrant an OI address), so there's no need to hide you *real* email address. If you want, you can set up auto-forwarding for an OI address, but just hand that out to real people like you would your real address.

It can get sort of heady, making up any old address to give to people, but if you're handing out OI addresses to real people, you're sort of defeating the purpose of OtherInbox. Either you're using OI's interface, which is optimized for dealing with emails en mass, or you're having to set up a bunch of auto-forwards to your primary inbox (with the nice interface for dealing with individual emails). OI is supposed to make it so you <em>don't</em> have to set up filters or auto-forwards all the time.

I really love OtherInbox. If you're not a user (and you didn't skip the rant), really go follow them on Twitter and get an invite code. Or find someone who's in the beta now and see if they have any invites left (I have a single one as of this writing). I didn't think I was really an awesome candidate for an OI user, but that's only because I didn't realize how much email I get from computers. It's really freeing to be able to click "Yes, send me updates" on everything. If you never get anything from them that's worth your time, you never waste any time on it. Throwing away that email address it completely trivial. The real trick to having OtherInbox improve your life is not swimming against the stream, though. So remember my rant when you sign up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2008-12-23 21:35:32</wp:post_date>
		<wp:post_date_gmt>2008-12-23 21:35:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>otherinbox-is-for-email-from-computers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="email"><![CDATA[email]]></category>
		<category domain="category" nicename="otherinbox"><![CDATA[otherinbox]]></category>
		<category domain="category" nicename="rants"><![CDATA[rants]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Save Versus GitHub!</title>
		<link>http://garbled.benhamill.com/2009/01/save-versus-github/</link>
		<pubDate>Fri, 09 Jan 2009 14:42:34 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[I'm reaching a point where I want everything in my life to be version controlled. I made a desktop making fun of my friend in the GIMP the other day and realized that I wanted it version controlled. I don't think Git will handle .xcf's. Pity, though.

My most recent action on this front doesn't actually have to do with Dungeons &amp; Dragons, but that's only because my system of choice is GURPS. I game master role playing games as a hobby and keeping track of campaign ideas has, in the past, been very disorganized and messy. I had scraps of paper all over and various emails to myself. If I have some brilliant idea at work, I can't just incorporate it into my notes or whatever, I'd have to email it to myself and then hope it was clear enough to remember what the actual idea was later, etc. If I was on the bus, I had my laptop (which I use to assist in GMing) and I could put it right into the notes, but recently I had some major stability issues with that machine and so became concerned about backups, etc.

Thus, I <a href="http://twitter.com/benhamill/status/1090481503">had an idea</a>. I've converted the essentials from my current campaign and put them in a repo and I'm working on notes for my next campaign there. There are several benefits, here:

The first is that before, I was using OpenOffice documents for my notes. This allowed for some pretty formatting, but when I had my timeline open, my NPC list, my session notes and my location notes all open, well... Open Office isn't a lean program and my lappy isn't the beefiest of machines. So now everything is a .txt and that's super lean. Yay. I'm aware, by the way, that this is very tangentially related to version controlling my notes, but still.

Secondly, I can check out a copy on any machine I'm sitting at when I have an idea. Or, if I really want to, I can edit them right on GitHub. Neat. As a sort of corollary to this is the fact that if my lappy were to get dropped, say, off a mountain, I could borrow anyone else's laptop and be ready to roll in about 20 minutes as long as I had internet access.

Thirdly, since I'm using git as opposed to, say, SVN, I don't <strong>have</strong> to have internet access. Local repos means I can make a commit on my laptop while on the bus and then push when I get home. Very handy since I do a lot of my thinking about campaigns on the bus.

Fourthly (this list is getting longer than I thought it would), is character data. So there is a piece of software that you can buy to help you create and track GURPS characters (whether non-player character or player character). Handily, it saves them in plaintext (I think it's actually .Net code or something unhelpful, not YAML or XML or similar, but nothing's perfect), so I can version control the characters, too, not just notes.

Fifthly (good grief), a friend of mine and sort of my GM mentor moved away and doesn't have a gaming group. In order to get his fix, he's convinced me (for the good and the bad of it) to let him help me plan and brainstorm my next campaign. He can check out a copy, branch it, issue a pull request (or I'll give him push access, not sure). Collaborative GMing is something that often can go wrong, but this tool, teamed up with some other guidelines we've adopted will help ensure that we get only the benefits out of this.

About the only things that I'd use for a campaign that it won't version control are pictures and sound files, but I don't expect to do a lot of changing of those over the course of things and, any way, it <strong>will</strong> save them, so it at least acts as a backup. While we're talking about negatives... My players could snoop the notes. Oh noes! In reality, I'll have to just trust them to stay out. They'd only be ruining their own fun, anyway.

So, a sixth, I guess, benefit is that I can share my notes with the world and if someone else sees something cool they want to steal or sees something sucky that they can do better then I've inspired them or at least helped them out a bit. If you like (and aren't one of my players), feel free to <a href="https://github.com/BenHamill/rpg-notes/tree">check it out</a>. If you have questions about anything in there, feel free to shoot me an email. I make no promises that anything in there will be better than total suck.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2009-01-09 14:42:34</wp:post_date>
		<wp:post_date_gmt>2009-01-09 14:42:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>save-versus-github</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="gurps"><![CDATA[gurps]]></category>
		<category domain="category" nicename="rpg"><![CDATA[rpg]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Twitter Project: atreply</title>
		<link>http://garbled.benhamill.com/2009/02/my-twitter-project-atreply/</link>
		<pubDate>Tue, 10 Feb 2009 06:57:34 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[I use <a href="http://twitterfox.net/">Twitterfox</a> to read and create tweets most of the time. I follow enough people that, when I open my browser for the first time for the day, more than 20 tweets have accumulated and, really, I don't want to go back and read all 60-odd or whatever that have accumulated overnight. Twenty, I should note, is just what Twitterfox picks up when it first turns on.

Occasionally, I'll come in and see the last few tweets in a conversation between two people I'm following (I only see @replies by others who are to people I'm also following). If it seems interesting enough, I'll go back and page through to see what they were talking about, reading in reverse order. Sort of like reading a chat log written by the guys that made <a href="http://www.imdb.com/title/tt0209144/">Memento</a>. It's not horrible, but neither is it ideal.

So I had an idea about it and I've started work. Twitter tracks what tweet (technically called a "Twitter status", apparently) any given tweet was a reply to. And, I figured, it would be relatively simple to, given a Twitter status ID, recursively follow the reply chain back and get the whole conversation. Turns out, I was right.

A proof of concept:
<pre lang="ruby" line="1">require 'rubygems'
require 'twitter'

class Reply
 attr_accessor :text, :author, :in_reply_to, :time, :atreply

 def initialize status_id
   status = Twitter::Client.new.status :get, status_id

   self.text = status.text
   self.author = if status.user.name then status.user.name else status.user.screen_name end
   self.time = status.created_at
   self.in_reply_to = status.in_reply_to_status_id
   self.atreply = Reply.new self.in_reply_to unless self.in_reply_to.nil?
 end

 def each_reply &amp;block
   reply_chain.each do |reply|
     yield reply
   end
 end

 def to_s
   self.author + ' - ' + self.time.to_s + "\n" + self.text
 end

 protected

 def reply_chain
   return [self] unless self.atreply

   self.atreply.reply_chain &lt;&lt; self
 end
end</pre>
This has a dependency on <a href="http://github.com/joshuamiller/twitter4r/tree/master">Joshuamiller's version of twitter4r</a>. My medium-term plan is to make a one-trick-website that will take an ID or twitter URL and give you the replies all pretty-like. Maybe make a bookmarklet for convenience's sake. I plan on using Rails, even though that's overkill because I figure it'll be a good learning experience on that front. Find it on <a href="http://github.com/BenHamill/atreply/tree/master">Github</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2009-02-10 06:57:34</wp:post_date>
		<wp:post_date_gmt>2009-02-10 06:57:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-twitter-project-atreply</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="projects"><![CDATA[projects]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="twitter"><![CDATA[twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Version Control Your Computer</title>
		<link>http://garbled.benhamill.com/2009/02/version-control-your-computer/</link>
		<pubDate>Thu, 12 Feb 2009 14:23:05 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[I've mentioned @<a href="http://twitter.com/carl_youngblood">carl_youngblood</a> here before. Someone once was trying to buy him something with his name on it. I think it was a key chain. You know the kind, right? However, then didn't have "Carl" only "Carlos". So we joked that, one day, he needs to write an operating system and name it CarlOS. Aren't we funny? I know. I'm sorry. Anyway, the other day, we actually got into some OS discussion that I thought had some interesting enough ideas to post here.

So how many computers do you own and use? I've got a desktop at home, a laptop and a machine at work. It's sort of a bummer to have different stuff or different versions of stuff, or stuff with different preferences on different computers. At least, for me it can really jack up my work flow. Especially if there is some application I use a lot with non-default preferences. Man, that bugs me! Remembering it all, bleh.

One thing Carl's fantasized about is having a computing environment the same everywhere you go. That's sort of a mainframe or dumb-workstation idea, which is not new at all. However, what if your whole computer were version controlled? You could branch it (so you don't have your work apps at home, etc.) and merge changes from one branch to another, if you wanted. You could check out a different branch on one machine and it would feel like you were on another.

Clearly an OS would have to be built from the ground up for this idea. You'd also have to have some kind of provision about storing the non-checked out branches locally. Also cloning the repo would be a hassle at current average (even high speed) connection speeds. But how cool would it be to install, say, Textmate at work and get all your settings right, etc. and then go home and merge that change in (You could merge it from work, I guess and then just pull from home. Whatever.)? You could get diff data (hard to implement, but with metadat not impossible):
<pre>$os diff gaming HEAD
+ Steam
+ Half-Life 2
+ X-Fire
- Textmate</pre>
Or whatever. You get the idea. Reverting would making backing up and creating, uh... what does Windows call them? Recovery Points? It would make all that easy and moot. Clearly Linus Torvalds needs to be in on this "project"; he has the experience in both OS design and version controlling that would be invaluable. Not that, you know, Carl or I are actually considering doing anything with this idea. It's an interesting thought experiment, though.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2009-02-12 14:23:05</wp:post_date>
		<wp:post_date_gmt>2009-02-12 14:23:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>version-control-your-computer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="naval-gazing"><![CDATA[naval gazing]]></category>
		<category domain="category" nicename="os"><![CDATA[os]]></category>
		<category domain="category" nicename="philosophy"><![CDATA[philosophy]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git Tutorials Suck, A Sucky Git Tutorial</title>
		<link>http://garbled.benhamill.com/2009/03/git-tutorials-suck-a-sucky-git-tutorial/</link>
		<pubDate>Wed, 18 Mar 2009 09:13:23 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Context... Perhaps Too Much Of It</h4>
So I was reading <a href="http://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">this blog post</a> about learning and explaining because @carl_youngblood <a href="http://twitter.com/carl_youngblood/status/1115967090">tweeted about it</a>. I think Carl's right: I had a hard time learning git (by which I don't mean to imply I'm some sort of expert now, but the learning is going easier now).

I think the main problem that I had was this: Having learned Subversion, with it's central repository, it was a hard abstract thing to understand. And some (I feel many of the ones I read, anyway) of the tutorials out there try to start at the abstract. Little help that did me (see above-linked article. Really, it's very good). And even ignoring those, I had to read a lot lot <em>lot</em> of the practical ones before things started sinking in.

So I've sort of come to understand that, actually, the tutorials don't suck; learning abstract things just takes time and, at the time, that can be frustrating. So I'm going to offer my own little sucky tutorial, which will focus on the practical aspects and, if you read this and don't get it, you can follow some links at the end to other articles I found helpful and maybe, after roughly a week, you'll have your 'ah-Ha!' moment and think about how git is just like monads... whatever the heck those are.

A lot of tutorials for git newbies start out explaining the Staging Area with some kind of metaphor so that it seems friendly or, I suspect, out of some subconscious wish to actually obscure it from Subversion converts so that git seems more familiar--more like SVN, which it is not very much like at all. I'm not going to really talk about it much. When we get to the commands that affect it (shortly, here), I'll explain what they do. You can make the abstraction your self.

I'm intentionally writing this off the top of my head for two reasons: If I have to look up a command, then you might as well read whatever tutorial I looked it up on and if I have to look it up, then I clearly don't use it all the time and thus, you don't need to know it to get going on Git.
<h4>The Tutorial</h4>
I've got six sections to this thing with (I hope) at least vaguely descriptive names. They are:
<ol>
	<li>Setup</li>
	<li>Initial Commit</li>
	<li>SitRep</li>
	<li> Staging Area</li>
	<li> Remote Repo</li>
	<li>Conclusion/Links</li>
</ol>
<h5>Setup</h5>
You have a project you just started in a directory called 'notes'. This isn't even code, it's just notes about something that you want to version control and back up. It's a collection of text files and the directory structure is something like this.
<pre>$ pwd
~/notes/
$ ls
contact_info.txt  general.txt  outline.txt
</pre>
After <a href="http://git-scm.com/download/">installing git</a> as appropriate for your operating system, you start out by typing in the command line <code>git init</code>. This will create a directory called <code>.git</code> in <code>notes/</code>. There's some stuff in there, but for the most part, you can ignore this for now. Suffice to say it's where git does it's book-keeping. What you've got now is a local git repository or, as the kids say, a "local repo", but nothing's in it.
<h5>Initial Commit</h5>
So you do a <code>git add .</code> (note the trailing period). This will toss everything (that's what the period means) in <code>notes/</code> into the staging area (including stuff that's in directories that're in directories that're in <code>notes/</code> etc.). The repo is still empty. To actual save stuff once it's been staged, you do like this:
<pre>$ git commit -m 'Initial commit.'
[master (root-commit)]: created 7db8343: "Initial commit."
0 files changed, 0 insertions(+), 0 deletions(-)
create mode 100644 contact_info.txt
create mode 100644 general.txt
create mode 100644 outline.txt
</pre>
The <code>-m</code> option says you're going to specify your commit message right after. Sometimes, you'll want to leave a longer message, in which case, you forget the <code>-m</code> and git will automatically fire up a default text editor where you can put in longer stuff. Since a lot of that varies widely from OS to OS, I'm going to skip it and you can read more details on other tutorials (see below). Notice that you get a list of what's changed (you created 3 new files in the repo) and you get your comment back in the output. Splendid.
<h5>SitRep</h5>
Now you've made your initial commit, and your stuff is in version control. Go into contact_info.txt and add something (doesn't matter what for these purposes). Imagine you've made that change and then walked away and forgotten about it. You can use <code>git status</code> to see what's new, thusly:
<pre>$ git status
# On branch master
# Changed but not updated:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   contact_info.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
</pre>
Using <code>git status</code> is just like a reminder. It doesn't tell you much, but it can jog your memory about what you've already staged or what you changed and didn't stage or what files you added. To get the real scoop about how a file changed, you use <code>git diff</code>. When you run <code>git diff contact_info.txt</code> the output will vary depending on what you had initially and what you added, but the gist is this: It will show you the changes (all of them) with a + before the line for additions and a - before the line for deletions. Generally, it gives a few lines before and after a change for context.

So let's add our new contact_info change to the staging area and commit it, yeah? Do <code>git add contact_info.txt</code> and then <code>git commit -m 'Updated contact info'</code> or similar. Whatever comment you write is fine. Note we could've used <code>git add .</code> but I wanted to show the single-file syntax.
<h5>Staging Area</h5>
Now let's put in some stuff into the <code>outline.txt</code>. Whatever you want. Just some stuff. Save it. But wait! We should also add some stuff to the general notes, just a quick overview at least, so put some stuff in there. We'll finish the outline changes in a second. This is so much more pressing. Obviously.

Now, it's good repo etiquette to only commit stuff atomically, which is to say that all the changes have to do with each other. Some people will say that you should only commit stuff that works (code compiles or whatever), but with git that's less of a concern. I'll come back to this point. What I'm getting at now is that you started one change and realized another needed to be made before you finished the first one. Now you want to commit only the second one, right? Simple: <code>git add general.txt</code> then <code>git commit -m 'Added overview'</code>. Because you never staged the outline (with your half-way-made changes), it doesn't get committed. Later, if you need to revert that commit or whatever, you won't have to worry that something else is mixed in there. Now, go ahead and finish your outline changes, and commit them. You should be able to do it on your own now.
<h5>Remote Repo</h5>
So, then... we're version controlling this stuff. What if you want to get at it from another computer or let someone else get at it or... something? Pop on over to <a href="http://github.com/">Git Hub</a> which is my remote repo host of choice. There are others. Shop around, if you like. After you create an account, you can <a href="https://github.com/repositories/new">create a new remote repo</a> called whatever you want. You'll then be shown a page with some directions. Follow the ones under the heading "Existing Git Repo?"

The <code>git remote add origin git@github.com:&lt;username&gt;/&lt;project&gt;.git</code> command basically tells git where your remote repo is. You can have more than one if you like and, actually, do all sorts of crazy things with naming if you like, but I just want to handle the default, assumed case with this tutorial. One interesting thing: Github gives you two addresses for each repository (other hosts may do the same, I don't know). The one that starts <code>git@github.com</code> is your read/write address and there's one that starts <code>git://github.com</code> which is your read-only address. Since this is your own repo, you want to make sure to use the read/write address.

The <code>git push origin master</code> command is what actually moves your commits to the remote repo. <em>This</em> is where I recommend you adhere to the "only stuff that works" doctrine. If this is code, and you're sharing the repo with your team or whatever, this is where they can get at it, so you don't want to hand them broken stuff or half-finished ideas or whatever. So only <strong>push</strong> code that compiles/works. Pushing your code updates the remote repo with all the commits you've made since your last push.

The way you (or someone else) gets commits out of a repo is by using <code>git pull</code>. It takes the same arguments as <code>git push</code>. It will pull the commits down and then try to reconcile those changes with any that you've made since the last time your local repo was in the same state as the remote repo.
<h5>Conclusion/Links</h5>
I feel like this has gotten pretty long and I don't want to put too much information all at once. That should be enough to get you started and, really, just try it out for a while and get comfortable with the basics. Don't be afraid, if you get something out of whack and realize you've done something wrong, to kill your .git directory (which will delete the local repo) and start again from the top. I've intentionally left a lot of stuff out (like push/pull and branches and multiple remote repos can get kind of hairy), so here's some documentation, blog posts and articles that I've found helpful. These are in no particular order and some are more advanced than others, so just start clicking and see what you like:
<ul>
	<li><a href="http://github.com/guides/home">Github's Guides page</a></li>
	<li><a href="http://git-scm.com/">The Git Homepage</a></li>
	<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/">Git Magic</a> (a huge work)</li>
	<li>Using Git Without Feeling Stupid <a href="http://smalltalk.gnu.org/blog/bonzinip/using-git-without-feeling-stupid-part-1">part 1</a> and <a href="http://smalltalk.gnu.org/blog/bonzinip/using-git-without-feeling-stupid-part-2">part 2</a></li>
	<li><a href="http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide">Awesome StackOverflow page</a></li>
	<li><a href="http://cheat.errtheblog.com/s/git">$ cheat git</a></li>
	<li><a href="http://www.eecs.harvard.edu/~cduan/technical/git/">Understanding Git Conceptually</a></li>
	<li><a href="http://eagain.net/articles/git-for-computer-scientists/">Git for Computer Scientists</a> (highly technical and abstract)</li>
	<li><a href="http://whygitisbetterthanx.com/">Why Git is Better Than X</a> (Not only evangelical, but some helpful stuff)</li>
	<li><a href="http://learn.github.com/">Github's Learn page</a></li>
</ul>
If you want to ask me about git or whatever, feel free to email me or leave something in the comments. Also, if you spot a mistake or something here doesn't make sense, _please_ let me know. Hope this is helpful to someone.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2009-03-18 09:13:23</wp:post_date>
		<wp:post_date_gmt>2009-03-18 09:13:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-tutorials-suck-a-sucky-git-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bad &amp; Getting Away With It</title>
		<link>http://garbled.benhamill.com/2009/04/bad-getting-away-with-it/</link>
		<pubDate>Thu, 30 Apr 2009 16:34:52 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[There's been tons of hoopla about these slides that some guy showed at GoGaRuCo . Seriously, so much hoopla that I've been unable to absorb the guy's name (note: I have a really, really hard time with names as it is, so...). Also so much hoopla that I don't even really know what to link to so that people will have an idea of what I'm talking about if they don't already. I guess <a href="http://hackety.org/2009/04/29/aSelectionOfThoughtsFromActualWomen.html">_why did a decent job of explaining</a> it by not explaining it. The short story is that there were some slides in a presentation with very scantily clad ladies doing very suggestive things. Everyone's freakin' blogging about it and I hate to me-too this thing, but I do want to express a thought I haven't seen yet and I also neglected to make a post this month, which has been bugging me.
<h4>And Now, a Tangent</h4>
So in college, I played trombone in the marching band. It was good times and we had this principle that we called The Stupid. This may not make perfect sense to people who haven't experienced band social dynamics first hand, but I'm going to try. Basically, the trombone section had a reputation amongst the rest of the band (360ish total members) for doing ridiculous, stupid things for no reason. It had been decided amongst ourselves that, rather than try to live this down, we'd just run with it. So we did Stupid things on purpose; frequently to humorous effect. I mean--we were always entertained, others were only sometimes entertained.

That was the big flashy visible part of the Stupid. We got elaborate, spending large percentages of our meager college student incomes on Stupid ideas that we planned for weeks. We went to great lengths. The part of the Stupid that wasn't so visible was the great lengths we went to to ensure that we didn't... inflict the Stupid on anyone who didn't opt in. We had the goal of making so that if you missed some prank (or whatever you want to call it, not all of it was traditional pranks) of ours by a few hours, you'd never know it happened. We had varying levels of success with it, of course, but I think we did a pretty good job.

We also tried to go to Stupid lengths to be helpful to the band in general; we'd help clean up or take care of something that we saw needed doing rather than just waiting for someone else to do it or reporting it or whatever. I should point out that the directors found the Stupid highly unamusing in the way that I think is probably appropriate for teachers to find the antics of their students. Taking care of things and working hard was sort of our effort to come out net neutral in their minds and not get in hot water.

So the 'bones weren't nationwide (well, the Stupid did get on ESPN in the background a couple times and of course we were on TV performing at games, but not for our antics, generally), as <a href="http://gilesbowkett.blogspot.com/2007/10/im-bad-im-nationwide-job-security-vs.html">Giles says</a>, but we did have a reputation for being bad and (the key to being bad) getting away with it.
<h4>The Moral of Our Story</h4>
So, as things go in college, people get older and graduate and new folks come in, etc. Traditions shift and change. There came a day when some new kid was really jazzed up about the flashy, visible, <strong>bad</strong> part of The Stupid and didn't have the working-hard, cleaning-up-after-yourself, help-others-out part of the Stupid down so good. Basically, he was seeing the bad and didn't see what let us get away with it. And he (I'm actually talking about several people over a period of time and series of events) did something he thought was Stupid, but was just stupid. He got on people's nerves, got in people's way, maybe he broke something that cost money... and he didn't do anything that would make people think, "Well, that's alright, because... whatever."

So I hope you see where I'm going by now. Amongst Railsers (as a broad generalization and as distinct from Rubyists) there's a bit of a tradition of being bad. DHH is, arguably, the originator of <a href="http://www.flickr.com/photos/benhamill/3490074270/">that attitude</a> and he's certainly been an icon of it. I'm not even saying he's wrong. I'm saying that whenever you have people like him (and he is, I should stress, not alone, here, Cf. Chad Fowler, Giles Bowkett and Zed Shaw) there will be others who look up to that way of being, who idolize it, who imitate it, but who, ultimately, don't <em>get it</em>.

These freshman, as it were, will do the flashy, visible, bad part of the image (perhaps poorly, but perhaps not) but neglect to do the more subtle things that let their idols get away with it. I'm not sure what it is those idols are doing, specifically, that makes up for their behavior (they certainly aren't practicing their music the most). I suspect that, really, everyone has to find their own way to make up for acting like a jerk.

What I'm driving at is that if you're setting an example (as anyone highly visible in a community is) for being so awesome that no one minds when you're a jerk, you have to take a bit of responsibility when others imitate you and screw it up. I think Matz chose (probably by nature, rather than consciously) an easier path: If you set an example of being humble and nice and people imitate you and fail, they'll at least have the safety net of, "...well, his <em>intentions</em> were good."]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2009-04-30 16:34:52</wp:post_date>
		<wp:post_date_gmt>2009-04-30 16:34:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bad-getting-away-with-it</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="philosophy"><![CDATA[philosophy]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="rants"><![CDATA[rants]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Concern Over Separation of Concerns</title>
		<link>http://garbled.benhamill.com/2009/05/concern-over-separation-of-concerns/</link>
		<pubDate>Thu, 07 May 2009 16:08:40 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[I have a lot of online identities. Who doesn't these days? I've got a gmail account, which means I also have a gchat account and that account can also double as an OpenID. Because I got on the bandwagon before Google did, I have a different OpenID. I've got an AIM account (well, one active and a few that've atrophied over the years). I've got a Twitter account and an account at Hacker News and one over on the GURPS fora and an OtherInbox account and... a ton of other sites. Sometimes, it's all a lot to keep track of.

However, sometimes they get conflated in ways that annoy me. For instance, especially since getting hooked into OtherInbox, I've protected my gmail account a lot. I route to it from several @benhamill.com addresses, for instance. And, really, it's harder for other people to remember my picked-it-because-of-a-crowded-namespace-username at gmail.com than it is to remember my-first-name at my-full-name.com.

However, the circle of people I give my (or an) email address to is different from the circle of people I want to chat with over AIM (and is certainly different from the circle of sites I'd want to sign into with an OpenID). So I have warring desires: I like having an XMPP chat account now that I've used gchat and I wouldn't have tried it if it hadn't been handed to me, but now I wish it were a different account (so I could disclose my chat id, but not my email address). Problem is, now that I've got people used to that identity in that format, the overhead for switching is somewhat high. Also, there's the convenient merging of contact lists that Google does for me (probably possible with different identities, but certainly not as easy).

So, if I didn't have an OtherInbox account and I didn't have a separate OpenID: just my gmail account... I'd be (tacitly) giving my email address to people I wanted to chat with and websites I signed into with OpenID, I'd be giving my OpenID and email address to people I chatted with, etc. That seems... bad to me. Am I being paranoid? There's a balance, here, between lowering the bar of entry ("Want to try out New Thing X? Easily done: you already have an account.") and separation of concerns. What're your thoughts on the topic of identity management and separation thereof?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2009-05-07 16:08:40</wp:post_date>
		<wp:post_date_gmt>2009-05-07 16:08:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>concern-over-separation-of-concerns</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="identity"><![CDATA[identity]]></category>
		<category domain="category" nicename="philosophy"><![CDATA[philosophy]]></category>
		<category domain="category" nicename="security"><![CDATA[security]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Happy Hacker</title>
		<link>http://garbled.benhamill.com/2009/06/the-happy-hacker/</link>
		<pubDate>Fri, 05 Jun 2009 17:14:43 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[You frequently hear (or I do, anyway) the advice that if you're unhappy in your coding job, you should scratch your own itch, work on what you love... Work on something you'd be a user for. Because then you don't have to do a bunch of requirements gathering and get them inevitably wrong, etc. etc. The idea seems to be that if you love the business process, you'll love working on the code that enacts it. And, well, that's fine. It seems to make a lot of sense, on the surface. But then I thought about history.

As programmers, we don't have a lot of it (compare auto workers or, say, masons). History, I mean. But there's some and in the days of <a href="http://www.cs.utah.edu/~elb/folklore/mel.html">Mel</a> and COBOL Cowboys, things were different from what they are now. Today we have all these powerful abstractions and high level languages. Folks (well, not all, but many) consider it to be ideal if you're basically writing your code in a DSL specific to your business process. Which means your code is really tightly coupled to your business (on that layer, anyway). I don't know that that's a bad thing at all (in case I sounded critical). I just want to contrast it to what came before.

Those dudes were almost just writing ones and zeros. They were so far removed from the business processes they were enacting and the folks who were using their stuff that I wonder how much impact it had on them. Would Mel have been any more or less happy writing financial management apps for large companies than solitaire? I kind of think it wouldn't have mattered to him; he was in it for the code and playing with numbers. He enjoyed all that low-level stuff.

So I wonder, is our (figurative us, here) unhappiness when dealing with business processes we aren't personally invested in a symptom of all of our awesome high level languages and nice abstractions?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2009-06-05 17:14:43</wp:post_date>
		<wp:post_date_gmt>2009-06-05 17:14:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-happy-hacker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="philosophy"><![CDATA[philosophy]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The New Breed of Hacker</title>
		<link>http://garbled.benhamill.com/2009/06/the-new-breed-of-hacker/</link>
		<pubDate>Tue, 09 Jun 2009 12:00:08 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[In light of my last post, I got to thinking some more about old school hackers. Also, at my job, we've got some people who've been here a <em>long</em> time. One in particular, we'll call him Steve, is very smart, but... And, see, that's sort of the thing: I can't put my finger on it exactly. Steve is <em>blazingly</em> smart. But there's clearly a difference between he and I that isn't, I think, just accounted for by the 20 or so (I'm guessing) year difference in our ages.

If I see something I dislike&amp;mdash;something that could be better&amp;mdash;I really want to see it change. I want to be involved in that change if not driving it. Steve is often watching and present. He's paying attention mostly and if you ask him a question he'll have an insightful answer. If someone proposes a change that's actually a good one and addresses a real problem, etc. etc. he'll be glad the change is coming. But he never pushes for it. He never starts a conversation (in the wider sense, I mean; he <em>will</em> say hi to you in the hall or whatever) and hardly chimes in unless addressed directly.

And I think Steve fits a sort of archetype. He's very interested in low-level details (well, actually in almost any kind of technical detail). He seems to be pretty much interested in being left alone and tinkering in his shop to see how things work (to use a light metaphor, here). If something is bad or less than optimal for other programmers around him (and including him), he'll either ignore it or work around it on his own. His solution wont be general enough to apply to everyone, though and he wouldn't publicize it. He's very internally focused. And I associate this stereotype with older programmers or, more accurately, with old school programmers (how long have you been coding, not how long have you been alive).

On the other hand, I think think there's a newer breed of programmer that's becoming or has become very common. And I want to be very specific, here: I'm talking about hackers; folks who code because they enjoy it, not those who do it because its their job. People who would code to solve computer-related problems they have at home even if they were a news anchor or a trail guide. This new breed is more externally focused. We want our solutions to problems to be useful to other people. We want to have a conversation and (often) change the way things are done (for what we see as the better). We want powerful abstractions and like to live up away from the metal, generally.

I haven't cataloged all the differences and, in particular, I'm having a hard time figuring out the attributes for my "new breed" of hacker are. Of course I'm talking about generalizations and stereotypes, here, but I don't think that's intrinsically bad. Basically, I get a sense of a certain amount of cohesion in personality type and behavior in these two groups and it struck me as interesting. What do you think, am I drawing a distinction where there is none? Is this distinction useful for anything? Is there some interesting point I've missed?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2009-06-09 12:00:08</wp:post_date>
		<wp:post_date_gmt>2009-06-09 12:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-new-breed-of-hacker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="philosophy"><![CDATA[philosophy]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Breaking Expectations</title>
		<link>http://garbled.benhamill.com/2009/07/breaking-expectations/</link>
		<pubDate>Fri, 31 Jul 2009 15:00:09 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[Whenever we interact with the world, we use cognitive shortcuts. It's handy, you know. We make assumptions about our environment so that, if we've guessed right, we can respond appropriately to our environment more quickly as it changes. It's a survival technique.

However, it can sometimes get us into trouble, especially socially. We see someone dressed a certain way or giving some other kind of social cue and we assume other things about them. Most of the time, this works brilliantly; they're sending those cues on purpose and we're supposed to interpret them the way that we do. Or they're not sending those cues on purpose, but they're identifying with a group and so our reaction is still appropriate.

I have a hard time, sometimes, in social situations. I have had to learn, via careful and intentional observation and memorization, many social conventions that it seems others picked up earlier, easier or more instinctively. So I'm somewhat sensitive, now, to the social cues that others send. Which is to say that I'm more consciously aware of the ones I notice, not that I notice all the little ones; the fact that I have to consciously process them slows me down and I miss many cues because of it.

I struggled, for a long time, with the fact that others often acted as if I understood some cue I'd missed (a reasonable assumption on their part, statistically speaking). And I realized that I was sending as many "normal" social cues as I could in order to fit in (my younger self was less comfortable being a huge nerd than my present self). But this meant that people were under the impression that I conformed to their expectations... I was basically lying to them.

So I set about trying to find some things I could do that would indicate to someone that they'd be best served (assuming their goal was to communicate effectively with me) being fully mentally engaged, rather than on auto-pilot. When i first had this idea, I also had the idea that I was <em>special</em> and <em>different</em> and so more deserving of people's full attention. I've since become a bit more humble in that regard.

I don't want to get into a whole ton of detail about my personal expectation breaking journey. I want to come to my point, which is this: I wanted to break people's expectations so that they'd have a "What?" moment and hopefully clue in that something new or uncommon was going on. Instinctively, I knew I shouldn't go _too_ far off, but it's not something I realized until recently.

Whether it's yourself or a product or brand, I think people often want to break expectations. And I feel like people hand out that advice a lot. It's decent advice, too. However, it's one thing to wear funny socks or something and another to dress in a gorilla suit every day. Funny socks are different enough that people will look at you oddly, but still feel like they can have a conversation with you. A gorilla suit is so radical that many people will assume they can't cope to the difference, whether they're right or wrong.

The analogy that popped into my head when I initially thought of this was a window. If you want people to see you (assuming you're transparent, like, you know, a window), then you might think that cracks would help. I certainly notice a window with a crack more than one without. But if you apply too much force, you'll shatter the glass and there will be gaps in the window and jaggey bits that people are afraid to some too near, etc. It's a much more upsetting experience. I guess my advice on the topic (for those that want it) is this: Break expectations if you like, but apply light pressure so you don't shatter them.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2009-07-31 15:00:09</wp:post_date>
		<wp:post_date_gmt>2009-07-31 15:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>breaking-expectations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="naval-gazing"><![CDATA[naval gazing]]></category>
		<category domain="category" nicename="philosophy"><![CDATA[philosophy]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Side Project: HeyGoVote</title>
		<link>http://garbled.benhamill.com/2009/09/new-side-project-heygovote/</link>
		<pubDate>Mon, 14 Sep 2009 09:30:34 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=19</guid>
		<description></description>
		<content:encoded><![CDATA[National elections, especially the Presidential elections, get a lot of attention in the US. People talk for months about who might campaign before people even announce their candidacy. There are news stories all over the place covering them. On the other hand, more local elections (for state reps or city councils, etc.) get a lot less coverage (because it's not CNN's job, for instance). Right after this most recent Presidential election, I realized that I hadn't voted at all since the previous Presidential election. In four years, I hadn't cast a ballot, and I thought I should probably become somewhat more involved in local politics. Or, if not involved, at least aware.

One of the buildings adjacent to the one where I work is a polling location. In Texas, that means I can vote there during early voting. A few months ago, I was cutting through that lobby and saw voting booths set up. "Oh!" I thought to myself, "I wonder what we're voting on today." I could have voted right then, but I had no idea what was on the ballot, what the various opinions and angles were, etc. It would have been totally uninformed and random, so I refrained, but I started thinking about how I could be forewarned about elections so I could do my own research.

I could start watching the evening news or following local (or state-level) political blogs or take the local paper. But that's a lot of overhead which I've already decided I don't want to deal with... and just to get one piece of data. So I thought I'd solve my own problem and the way I'd solve it (and solve it for people other than me, who think in a similar way on this issue) was with Twitter.
<h4>The Pitch</h4>
My initial concept was that I'd set up an app that would store election dates and just tweet them. I quickly realized that it's a little more complicated than that. If I just tweet on election day, I've just recreated the oh-what-are-we-voting-on-today problem. So I need to give some warning ahead of time. @<a href="https://twitter.com/jonloyens">JonLoyens</a> pointed out that a tweet can be easily missed, so I should use direct messages. The beauty, here, is that I can build a reminder service and not have to manage who wants reminders: It's all just based on who's following the twitter account.

So the idea is that you'll follow @heygovote and it will direct message all its followers to warn that an election is coming up. Simple enough and if you want to opt out, you unfollow. Easy.
<h4>Three Rules</h4>
I want to keep these three things foremost in my mind while I'm working on this thing:
<ul>
	<li>No Bias - I don't want to help people decide how to vote, or influence their vote in any way. This is just about prodding people enough in advance that they can do their own research.</li>
	<li>No Data - I don't want to know who the users are and I don't want them to have to trust me that I'm not selling information about them to some organization (related to the above, as well). So I don't want to have to know anything about the user other than their Twitter user name and I don't even plan on storing that, just asking Twitter who's following @heygovote.</li>
	<li>No Bother - I don't want to hassle people. I want to remind people, not badger them. I also don't want to have to mess with the thing myself to keep it running; it should be fire-and-forget.</li>
</ul>
<h4>Trouble Scoping</h4>
It pretty quickly became evident that I needed to decide who my target was. I'd intended to target "Austin", but that doesn't really scale gracefully to the county, state and national levels. After talking to my brother, who works on campaigns and the like, I've decided I'm going to target Travis County. That catches most of Austin (more to the point, it catches where I live, since this is solving my problem) and also scales up nicely.

For voting purposes, Texas breaks counties up into voting precincts. All the election dates for all the precincts in a given county are the same, so one tweet (or, rather, direct message) will apply to everyone in Travis County. If, beyond comprehension, this becomes wildly popular and other places want HeyGoVote to cover them, then I'll deal with that as it occurs. My guess is that how elections are handled will be different enough from state to state that it would mean rebuilding the date-getting machinery for each, uh, constituency, as it were.
<h4>Where to Start</h4>
I haven't started coding on anything yet; all work to date has been design thinking and research on how I can get a hold of the information I need. I've sent some emails back and forth with the Travis County Tax Office (which decides election dates, oddly enough), who've been helpful. They don't seem to have a handy RSS feed of election dates that I can poll, so I'm still working out that side of things.

I will probably start on the reminder side of the application. If I design the DB schema intelligently, it can be very loosely coupled with the data gathering bit. Depending on how it goes, it also seems like the kind of thing that might make a useful Rails plug-in, too. So I might release that on it's own.

That being said, I expect to use Rails as the tool set. That might seem like overkill since nothing I've described has needed a web interface to it, but I have the idea that, after I get the reminder working, it might be nice to build a tool or two that would help people figure out where their polling location is (for folks who skip early voting), what's on the ballot for their precinct and things like that. If I can't find existing, non-partisan tools to link to for this, I might have to build my own.

Expect to hear more about this as I work on it. If you have any suggestions or questions, leave a comment.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2009-09-14 09:30:34</wp:post_date>
		<wp:post_date_gmt>2009-09-14 09:30:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-side-project-heygovote</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="heygovote"><![CDATA[heygovote]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="projects"><![CDATA[projects]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="twitter"><![CDATA[twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Garbled &raquo; Blog Archive &raquo; My First Ruby Gem]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://garbled.benhamill.com/2010/05/my-first-ruby-gem/</wp:comment_author_url>
			<wp:comment_author_IP>75.119.201.3</wp:comment_author_IP>
			<wp:comment_date>2010-05-07 09:38:34</wp:comment_date>
			<wp:comment_date_gmt>2010-05-07 14:38:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] my first ruby gem, twitter_alert. It&#8217;s intended to be a component of the side project I mentioned forever ago, HeyGoVote. It grabs all the followers for a Twitter account and DMs them a message. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Feedback Wanted: Blog Topic</title>
		<link>http://garbled.benhamill.com/2009/10/feedback-wanted-blog-topic/</link>
		<pubDate>Thu, 01 Oct 2009 02:07:25 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[You read my blog, right? I mean&amp;mdash;here you are reading it. I've been having an internal debate for a while about something, wondering what people who read my blog would think. Then I realized there's a wonderful way to find out: ask.

So far, Garbled has been mostly about programming stuff. I also do a fair amount of table-top <a href="http://en.wikipedia.org/wiki/GURPS">role playing</a> and since I started blogging, some of my ideas on that topic have ended up sounding like they might be worth a blog post. But I don't really have a role playing blog. In considering whether to post about both topics on Garbled, I've got two conflicting things going on:
<ol>
	<li>People say you should pick a topic and stick to it if you want to build readership. By this advice, I should talk only about programming here and find another place to post role playing thoughts.</li>
	<li>My thinking about programming and about role playing happen in adjacent or overlapping regions of my mind, so, to me, they are somewhat complimentary. I sort of feel like seeing both those lines of thought paints a (more) complete picture of me as a person.</li>
</ol>
So what are your thoughts? Would a <a href="http://en.wikipedia.org/wiki/Magic:_The_Gathering">rare or uncommon</a> post about role playing in general or maybe GURPS in specific be alright? Considering that it would mostly probably be about plot construction and other <a href="http://en.wikipedia.org/wiki/Gamemaster">GM</a> related activities. Or should I stick to programming and programming-adjacent topics? Let me know in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2009-10-01 02:07:25</wp:post_date>
		<wp:post_date_gmt>2009-10-01 02:07:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>feedback-wanted-blog-topic</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gurps"><![CDATA[gurps]]></category>
		<category domain="category" nicename="meta"><![CDATA[meta]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="rpg"><![CDATA[rpg]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FYI: My Tastes in Role Playing Games</title>
		<link>http://garbled.benhamill.com/2009/10/fyi-my-tastes-in-role-playing-games/</link>
		<pubDate>Wed, 07 Oct 2009 10:35:45 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[This is one of those posts bloggers write so that they can repeatedly refer to it later on. I intend this to be a short introduction to role playing (as in nerds at a table with dice, not a couple playing Santa or whatever your kink is) followed by a bit about my tastes and general habits regarding the hobby.
<h4>What's an RPG?</h4>
If you want, check out the <a href="http://en.wikipedia.org/wiki/Role-playing_game">Wikipedia article</a> on it, but my definition of a role playing game is this: There are some number of players and generally one Game Master (Dungeon Master, Referee, etc. terminology varies). The players and Game Master (GM) are telling a story together. Each player makes a character (a Player Character: PC) and they constitute the main characters of the story. In order to offer some tension for events where chance plays a part in the outcome, the group is generally using a set of rules that uses a randomizing tool (various kinds dice are most popular, but I've heard of cards, for instance) to help decide if the characters succeeded or failed at certain tasks. The important thing, here, is this sentence: The players and GM are telling a story together.

The GM is in charge, basically, of running the simulation, as it were. He (please don't take offense at my use of pronouns, Lady GMs) manages the world, figures out what the various not-protagonist characters (Non-Player Characters: NPCs) are doing, arbitrates the result of any actions taken by the players the outcome of which is not guaranteed, etc. The other thing that the GM does is he plots the stories the group tells together. Plotting for an RPG campaign, however, is significantly different from plotting for a book or movie because the players each control one of the main characters. So the GM ends up getting a general idea of where things are headed, what the major goals of various NPCs are and then how the PCs fit into it all. Then the PCs get in there and muck things up in interesting, fun ways. This collaboration in authorship means (like laying out a web page) letting go of a certain non-trivial amount of control as compared to, say, a novel author.
<h4>The Ways of Ben</h4>
In my specific group, I'm the GM. I have, right now, three folks playing in the campaign I'm running. In many schools of GM thought, game play from one sitting to the next are strung together to form a "campaign". The term originates from D&amp;D's origins in table top war gaming, so it can be a bit of a misnomer as it's used today. What constitutes "a campaign" varies widely. My definition, which you're about to read, is not in the majority, but it is how I do things.

In my social circle, a campaign is like a book: It has a beginning, middle and end. There's some unifying plot that ties it all together. When the plot is done, those characters go away and you read an entirely different story (please ignore <a href="http://en.wikipedia.org/wiki/The_Wheel_of_Time">Robert Jordan</a> for purposes of this analogy). A lot of people think of a campaign and the game as one and the same. They might be confused or skeptical about the same group of people just putting down one group of characters and making new ones. Campaigns without an end point in mind from the start can last for years and years and they generally increase in power level (trying to out do themselves over and over) to a place where the characters are fighting gods or eating planets or something suitably EPIC. People have fun doing this and that's great for them, but it's not for me. It starts to feel like a TV show that's been running too many seasons in a row (better bring in <a href="http://en.wikipedia.org/wiki/Jumping_the_shark">Henry Winkler and some skis</a>). I like a narrative arc and I like to pick the amount of epicness from the get go and have it be relatively stable. Also, having campaigns with a designed ending lets me change settings and try on a lot of different ideas. Which leads me to my next point.

My system of choice is <a href="http://en.wikipedia.org/wiki/GURPS">GURPS</a>. You can follow that link or not, but suffice it to say that it stands for Generic Universal RolePlaying System. It's basically a toolkit of rules without any setting information (contrast the famous Dungeons &amp; Dragons, which describes the world the game is played in to great detail). The thing I like about this aspect is that you can play a D&amp;D-like fantasy campaign to completion, then play a space opera and then play a police procedural or something. The ability to try out one thing for a while (length of my campaigns varies wildly, so take that with a grain of salt) and then entirely change gears for the next campaign is a big draw for me. As a GM I really enjoy the world-creation aspect and so I'm constantly thinking about what worlds would be fun to play in and what stories would be fun to play out in them; what kind of interesting people might live there. You get the idea. That's not the only reason I like GURPS, but I don't want to evangelize too much. Maybe that's a future post.

Another thing I do that I've heard very few people talk about is I've got a GM consultant. This is new as of my most recent campaign, but it's worked out so well, I can't imagine why I'd stop doing things this way unless the consultant turned into a player. Basically, the friend who introduced me to GURPS moved away and, in order to get his role playing fix, offered to help me hash over things with the world building of the campaign I was thinking of running. I recommend this technique to every GM that can swing it. Having two minds on the task, as long as you work well together, is an incredible boon. Your NPCs will seem more real and your world can afford to be more complex. It's easier to track more events happening at once and you're both going to think of cool things that the other wouldn't have. I feel like it's been multiplicative rather than additive to the quality of the campaign world.

Most RPG groups make a "party" or other group of characters that more or less always act in concert. They make decisions together and go do things all as a group. Lengthening the parade of unconventionality, that's not how I do things. If your character is not in the scene, you're not in the room. For some campaign settings, that means players (especially early on) can spend a non-trivial amount of time in my living room playing Rock Band or whatever instead of role playing. The win is that by containing information, you can, for instance, more easily dole out clues to each of the players and have them piece it together later when they're all in. This is cool for the players, not for the GM, I should note. The other thing it does is it lets each player get used to his character and how to play him without the noise of other players doing the same thing; to establish a sort of a base line. It takes a while to really figure out how to inhabit a character you're playing and unlike other kinds of acting, there aren't really rehearsals.

I've implied that there's a stage, early on, where the characters aren't spending a lot of time together. This is a symptom of what my GM-consultant and I call the Dann-style Campaign (Dann was the guy that introduced my consultant to GURPS). Dann-style Campaigns are very formulaic, but it is a formula that works very well. There are 3 (less commonly 4) PCs. They don't know each other at the start of the story and they all have different goals, needs and reasons for doing things. There is some kind of plot or conspiracy or mystery going on and their various goals draw them into being involved in it, which causes them to meet and discover/uncover/solve it together. The entire campaign general centers around a single, well developed location (say a single city). The fact that the characters are strangers and have different goals means they don't trust each other right off. The fact that they have different (possibly opposed) goals means they want different things to get done or have different priorities for things to get done. Together, those two facts make it not uncommon for a player to say, "Great. You guys go do that, I'll catch up with you later," and then go do his own thing.

I hope this makes a bit of sense to the uninitiated. If you've read anything by <a href="http://en.wikipedia.org/wiki/William_Gibson">William Gibson</a>, he uses this sort of story telling a lot. There will be several independent stories going on that, in the end, all have to do with each other in some way and come crashing together at some point in the tale. Now, Gibson tends to have things come together in the final act. In a Dann-style campaign, you generally want the PCs to all meet and start collaborating around the half-way point of the first act. "Act", here, is a vague unit of story-telling, not anything specific, mind.

Or think of a show like <a href="http://en.wikipedia.org/wiki/Lost_%28TV_series%29">Lost</a>, where the characters are strangers at the start and there's a high level of distrust and paranoia about each other. People spend a fair amount of time doing things on their own. From setting to setting, of course, the level of distrust can be dialed up or down. In Lost, the level of distrust is rather high between some protagonists and there's a fair amount of alliance shifting as time goes on. In a Dann-style campaign, you wouldn't have as many PCs as Lost has main characters and so shifting alliances between them would be somewhat tricky to do if you wanted it.

All of this is really in service to the next post I want to write which addresses some ideas I've been batting around about how and what to vary up in the Dann-Style formula. It seemed that, before I talked about variations, I should do a kind of an introduction to my style and, then, that an introduction to what an RPG is, etc. seemed appropriate. If you have questions about anything I've put here, post a comment and I'll be happy to answer it. Be warned, I may try to convince you that you should give role playing a try.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2009-10-07 10:35:45</wp:post_date>
		<wp:post_date_gmt>2009-10-07 10:35:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fyi-my-tastes-in-role-playing-games</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fyi"><![CDATA[fyi]]></category>
		<category domain="category" nicename="gurps"><![CDATA[gurps]]></category>
		<category domain="category" nicename="naval-gazing"><![CDATA[naval gazing]]></category>
		<category domain="category" nicename="rpg"><![CDATA[rpg]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Roleplaying Blog</title>
		<link>http://garbled.benhamill.com/2009/11/new-roleplaying-blog/</link>
		<pubDate>Tue, 17 Nov 2009 12:00:32 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[For those of you who thought my last post (about role playing) was interesting, I have some news: I won't be posting about that stuff here. I will, however, be writing on the topic. My friend, Stewart, and I realized the he and I would have a lot of fun writing together on a blog specifically about role playing. So if you are interested in our thoughts on that topic, we've called it <a href="http://rockmost.wordpress.com/">Maximizing Rockmost</a>. We've started off with several posts (some of which are expansions of material from my post here) so you can see what sort of thing we're likely to be writing about. I'm looking forward to it.

For those of you who wonder why I'm blathering about RPGs and wish I'd get back onto a technical topic, don't worry. I'm presenting at <a href="http://austinonrails.org/">Austin on Rails</a> this month about <a href="http://git.or.cz/index.html">git</a> (along with <a href="http://subelsky.com/">Mike Subelsky</a> of <a href="http://otherinbox.com">OtherInbox</a>). I plan on blogging about that presentation. I also want to write about vim and about ruby koans and about making my first ruby gem. So there's technical topics in the pipeline. Never fear.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2009-11-17 12:00:32</wp:post_date>
		<wp:post_date_gmt>2009-11-17 12:00:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-roleplaying-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meta"><![CDATA[meta]]></category>
		<category domain="category" nicename="projects"><![CDATA[projects]]></category>
		<category domain="category" nicename="rpg"><![CDATA[rpg]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vi Improved</title>
		<link>http://garbled.benhamill.com/2009/11/vi-improved/</link>
		<pubDate>Wed, 25 Nov 2009 13:06:00 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[I recently started using vim on my Linux machines for development (actually gvim and I just haven't gotten around to installing it on my Windows partition). I'd tried to learn it some time ago with the understanding that it's awesome, but it didn't catch on. I know a lot of smart people who use it and it was always one of those things that I felt would be really valuable for me to learn, but--it was hard.

Well, now it's easy. @<a href="http://twitter.com/adambair">adambair</a> mentioned <a href="http://www.derekwyatt.org/vim/vim-tutorial-videos/vim-novice-tutorial-videos/">this blog post</a> by <a href="http://www.derekwyatt.org/">Derek Wyatt</a>. It's a collection of videos he made introducing you to the most basic commands in vim. Enough to get your feet under you so that further research on your own has something to stick to. They're awesome.

However, the reason they're awesome is not just that he takes you step by step through the most important stuff or that he's lighthearted and friendly-sounding. The awesome part is that he <em>shows</em> you why it is that vim is so raved about. If you try to learn vim thinking that it's like TextMate or NotePad or something, you won't get it. And until you get it, there's very little impetus to get over the learning hump (or through the dip, depending on which way you chart things in your head).

The key to understanding, for me, was realizing this: You should not be spending most of your time with vim in insert mode. You should not be typing and selecting in the sense that Word teaches. You should be doing finds and replaces and yanks. You should be operating on your code with macros. If you're writing new code, great. You'll be in insert mode for a while, but even then, you'll want to invoke something that'll set up your class structure with maybe some default methods in it or something. And as soon as you're done, you'll want to be jumping around by line number, moving to a specific character in a line, replacing a segment of a line with two keystrokes. Really, just the movement possibilities blew my mind. So, <a href="http://vimeo.com/6999927">go watch the introduction</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2009-11-25 13:06:00</wp:post_date>
		<wp:post_date_gmt>2009-11-25 13:06:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vi-improved</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="vim"><![CDATA[vim]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Git Talk At Austin On Rails</title>
		<link>http://garbled.benhamill.com/2009/12/my-git-talk-at-austin-on-rails/</link>
		<pubDate>Mon, 07 Dec 2009 17:00:51 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[At the last <a href="http://austinonrails.org">Austin on Rails</a> meeting (Nov 17), I gave a talked entitled Practical Git Quickstart (<a href="http://prezi.com/ovik2bljor84/">Prezi link</a>). The slides don't have a lot of content and mostly underscored what I hoped to talk about. I blew through them in about ten minutes or less. The short of it is that I feel like a lot of git tutorials and introductions start off with the high-level stuff and that, especially for people new to git, that that's confusing. My goal was to give git newbies the most basic commands they'd need to be able to use git on a daily basis so that they could build their own abstractions before diving into the more heady stuff. I was aiming for an 80% solution to that, anyway.

After I finished the slides, I fired up a command line and an editor and just worked through some stuff. This post should sum up what I talked about, more or less. I started out covering the same stuff I covered in my <a href="http://garbled.benhamill.com/2009/03/18/git-tutorials-suck-a-sucky-git-tutorial">previous git tutorial post</a>, so maybe go check that out first. It should get you through setting up a new repository, adding files to the staging area, making a commit, checking your status and committing to a remote repository.

So let's pick up there, with remote repositories. The way you get code up to your repo is with <code>git push origin master</code>. Once it's up there, other people can get at it. If you recall, you told git where your remote repo was going to be with <code>git remote add origin git@github.com:&lt;username&gt;/&lt;project&gt;.git</code>. Someone who wants their own local copy of your repo does so with the clone command like so: <code>git clone git@github.com:&lt;username&gt;/&lt;project&gt;.git</code>. That will create a directory wherever the command is issued, named &amp;lt;project&amp;gt; and pull down the current state of the remote repo. Then, that person will be able to push their own changes, etc. This is all, of course, assuming they've got permission to do so.

So this new second person makes some changes and pushes them on up. How do you get them? Well, sensibly, the opposite of push is pull, so you issue <code>git pull origin master</code>. This is actually a two step process that's just for convenience. I don't want to get into the plumbing too much, but it basically grabs the state of the remote repo (<code>git fetch</code>) and then attempts to merge (<code>git merge</code>) it with your local stuff. So that's the most basic case of working with someone else on a project, or working alone on one using different machines, if you like. I use that case all the time.

So what about conflicts? If you both make a change to the same file and they <code>push</code> it first, you'll not be allowed to <code>push</code> because git can't handle the <code>merge</code> on it's own. Similarly, if you try to <code>pull</code>, it will do the <code>fetch</code> part, but be unable to <code>merge</code> and will tell you so. You can use <code>git diff</code> to see what the changed were and do the merge yourself. You can also use <code>git difftool</code> which is awesome, but takes some setup, so you should look into it later on (I skipped it in my presentation).

Once you handle the conflicts, you'll add the conflicting files to the staging area and make a commit. With all merges, I should note, git makes a commit just for the merge, so when you have conflicts, it'll have staged the things it can merge on its own and left the conflicts unstaged. As you fix them, you stage them and then you commit the merge commit. Git doesn't know if you really fixed the conflicts, so you can <code>git add</code> whatever version of the file you want, even a broken, not-conflict-resolved one. Just be aware.

That was more or less the end of my ordered presentation. There were some questions afterward and I'm going to attempt to sum up the discussion that followed, here:

First off, I wanted to mention how you ignore files in git. Unlike subversion, there is no <code>git ignore</code>. If you want git to ignore a file, you have to add it to a <code>.gitignore</code> file. This file is a list of patterns that git will ignore for the directory it's in and all directories below it. So you might have one for a python project like this:
<pre lang="text">tmp/*
*.pyc
</pre>
This will ignore all compiled python code (*.pyc) and everything in your tmp/ directory. I was baffled by this when I first came to git, but it's not really that hard. Note that you generally commit your <code>.gitignore</code> so that others can share it. If there's something you want to ignore on a per-machine basis, rather than a per-project basis, then you need to turn to my next topic.

Which is global git preferences. On Linux and Mac, git will look for a file in your root directory called <code>.gitconfig</code> and take global behaviors from it (it's tricky on Windows, and I haven't figured it out to my own satisfaction, sorry. If someone asks about it, I'll try to sum up what I know in the comments). In my other git post, I had gone through setting up a repo on <a href="http://github.com/">GitHub</a> and said to follow the directions there. Two of those steps were these:
<pre>git config --global user.name "&lt;your name&gt;"
git config --global user.email &lt;your_email&gt;
</pre>
Those created entries in your <code>~/.gitconfig</code> telling git your name and email address. You can also declare a global ignore file there. I like to call mine <code>.gitignore</code>. This is shockingly original, I know. On the machine I'm typing on right now, my <code>~/.gitconfig</code> looks like this:
<pre lang="text">[user]
email = blah@blah.blah
name = Ben Hamill
[core]
excludesfile = /home/ben/.gitignore
</pre>
I bet you can guess it, but just in case, you can either put your excludesfile in manually or do <code>git config --global core.excludesfile /whatever/file/path/you/want</code>. For reference, my <code>~/.gitignore</code> looks like this:
<pre lang="text">*.kpf
*.swp
</pre>
A .kpf file is a project file created by Komodo Edit, which I used to use for all my code editing needs, but not since I switched to <a href="http://blog.benhamill.com/2009/11/25/vi-improved">vim</a>, which is what creates *.swp files.

Finally, someone had asked about <code>git stash</code>. It's what I'd consider a more advanced command, but a lot of git fanboys sell it hard because it's cool and svn doesn't have it. However, as cool as it is, I think it can get you into a lot of trouble. Basically, you can be working on something and issue <code>git stash</code> and git will store whatever changes you're in the middle of and hide them away, putting your repo back in the state it was right after the last commit. You can then work on something more pressing, make commits, merges, new branches, whatever and when you're done, issue <code>git stash pop</code> and it applies your changes back (if it can).

The really hairy bit is that you can name stashes and so have more than one stash going at once. While a super organized developer might find this really useful, I find that it's easy to get stuff lost in there. You don't want to have tons and tons of stuff stashed and not remember, anymore, what changes were in which stash, etc. I advise, as a basic rule of thumb, that if you've already got one thing stashed and find yourself wanting to stash something else, then you should be looking at branching, not stashing.

I think that about covers it. I think someone recorded audio of my talk or maybe video. If it ends up posted somewhere, I'll come edit this post with a link to it. If you were at my talk and notice something I talked about then that I haven't covered here, let me know and I'll try to amend. Or, if you weren't there and feel there's a topic you have questions about, drop it in the comments and I'll do what I can.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2009-12-07 17:00:51</wp:post_date>
		<wp:post_date_gmt>2009-12-07 17:00:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-git-talk-at-austin-on-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="austin-on-rails"><![CDATA[austin on rails]]></category>
		<category domain="category" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thoughts on Google Wave</title>
		<link>http://garbled.benhamill.com/2009/12/thoughts-on-google-wave/</link>
		<pubDate>Tue, 22 Dec 2009 18:00:51 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[The buzz about <a href="http://wave.google.com">Google Wave</a> has worn off considerably (I've been <em>unable</em> to hand out the 18 Wave invites I have; if you want one, send me an email), but I also feel like I've used it enough to talk about it intelligently. I hear a lot of people still speak about Wave with confusion. They ask things like, "What is it for?" and "What am I supposed to do?". People talk about running out of things to do in Wave. I've never really understood the thinking that leads to these quandaries. I tried analyzing it to understand it, but I don't get it. So I'm going to try to explain how I've been thinking of it and hope that someone else can maybe bridge the gap for me.
<h4>What Is It For?</h4>
In a word: collaboration. It is not <em>quite</em> email and not <em>quite</em> AIM and not <em>quite</em> a wiki. It's all of them. If you're willing to wave someone instead of emailing them, you'll get only a little bit of win out of Wave, which is that you can add someone in later, go back to edit old content and reply in line. That's nice and all, but I think not enough that people really notice. Especially if the other person they're trying to communicate with isn't checking waves frequently.

The real win, in my experience, has been when I'm working with someone on some kind of document. For instance, some buddies and I want to put together a <a href="http://gowalla.com">Gowalla</a> Trip around the UT Campus. We started with a snippet that just had a big bulleted list of ideas from me. Below that, we discussed other ideas to add or not and all three added them to the list. Then we've been going around making the Spots and when we do, we add the url to the listing. It's been a wonderful work flow; some of it has been real-time like a chat room and some of it has been asynchronous like email.

Similarly, I was working on some code and couldn't figure out what was going wrong with a specific bit of it. I IMed a co-worker about it and he was trying to help me, but it was cumbersome because he couldn't see the code (it's a big campus). We switched over to a wave, where I pasted the code in. He could see it, edit it, reply in the middle of it. So much more efficient than using AIM.

So that's the trick. Wave doesn't have a lot of win over email if you're telling your mom when to come over for dinner next weekend. It has a <em>lot</em> of win when you're working with someone on some kind of document.
<h4>I Ran Out Of Things To Do</h4>
Well, yeah. That's a bit like saying you ran out of things to do with your table saw. The same charge could be levied at gmail: if you don't have any more emails to write or read, there's not a lot else to do. Especially before people get comfortable with what wave is good at, you're not going to have a ton of new waves. I, however, have had plenty to do in wave recently. Partly because I've been trying to find almost any excuse to use it so I could see what it was good at. This meant people replied to me there and some stuff wasn't so good, but mostly nothing was amazingly worse in wave than whatever other tool we'd've been using for that interaction else wise.
<h4>So Wave Is Perfect?</h4>
No. In fact, I've found something that it's pretty bad at or at least very awkward at: random chatting. If I IM a friend across the country to see how he's doing and our conversation wanders in topic, I feel like wave is sort of too much structure. On the one hand, it's nice to be able to manage threading as topics shift and change (if I post a tangent, we can basically split the conversation thread there). On the other hand, it's kind of a pain to have to manage threading as topics shift and change. When we switch topics, do I want a new wave? Not <em>really</em>. I'm just not sure what to do with that kind of thing. Maybe it's a matter of discovering the right work-flow, but maybe not.

Relatedly, since Google has taken the liberty of linking my gmail/gchat/gcal/etc. account with my wave account, it would be nice to be able to take a gmail thread or a gchat exchange and import it into wave for further editing. This is especially when I'm in a random chat and the topic shifts to some project we've been collaborating on. I assume this is something that's on the horizon, but as I've been using wave pretty regularly, I'd get a lot of mileage out of it now.

I also think there are some things wave is or will be good at that no one's discovered yet. I think it has huge potential and I'd like to warn people off of giving up on it too early. Like so many things that are super valuable to know how to use and can change the way you work (or work/play) for the better, it'll take some getting used to, some learning and some exploration.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2009-12-22 18:00:51</wp:post_date>
		<wp:post_date_gmt>2009-12-22 18:00:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thoughts-on-google-wave</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="email"><![CDATA[email]]></category>
		<category domain="category" nicename="google-wave"><![CDATA[google wave]]></category>
		<category domain="category" nicename="rants"><![CDATA[rants]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Efficiency in Algorithms Everywhere</title>
		<link>http://garbled.benhamill.com/2010/03/efficiency-in-algorithms-everywhere/</link>
		<pubDate>Tue, 02 Mar 2010 04:00:35 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[I have heard UI folks talk a lot about how everything has a UI. Doors have a UI, you know? If there's a horizontal bar, it's clear that you're supposed to push. If there's a vertical bar, that invites you to pull. It's a poor UI if you walk up and the door looks like it wants you to pull, but, in fact, requires you to push. I've been seeing UIs everywhere since I first heard this idea.

I realized just the other day that I also look for efficient algorithms everywhere. I think I may have been doing it for years and just not realized it. Maybe other people do this, too, but I've never heard anyone say it out loud in quite this way. Maybe I'm insane or OCD. I'm just going to present some that catch my eye frequently (or have recently, anyway) and rant about them. How's that for a thesis?
<h4>The Cash Register</h4>
I often buy things at stores. Most of my transactions are via credit card. Especially when I'm buying, say, lunch, the transaction is so small that the store doesn't ask me for my signature (let alone ID). So after placing my order, the employee tells me the total and I hand over my card. They then swipe it and stand there while we both wait for the receipt to print out and the register to see that the transaction went through. Then I get handed back a receipt (maybe with an order number) and card at the same time. I have to keep the receipt out and put the card back in my wallet. I may also have to carry away a cup to be filled with soda.

Frequently as I'm handed my receipt and card at once I'm told, "ThankyouforcomingtoRestauranthaveaniceday?" in a big rush and then glared at because it takes me a second to put my card away, pick up my receipt and cup and move along. If time is such a big deal (and during a lunch rush, let us understand that it <em>is</em>) that you'll glare at a paying customer over it, perhaps an ounce of algorithmic analysis should go into minimizing it, no? If, for instance, I was handed the card back immediately, then I could put it away and be done with it before I am handed a receipt and cup. Then I can immediately move and let the next customer up. This increases the number of times the employee has to reach across the register and the number of times I have to reach to meet them, but that action takes much less time than it does for me to operate my wallet or for the credit card machine to get a response from the credit card validation server. It bugs me.
<h4>The Bus</h4>
Some people seem to think that there are two discreet tasks when boarding the bus: Waiting-in-line-to-pay-and-board and swiping-card-or-paying. This is sort of ridiculous to me. Clearly you can get your money or card out while you wait. In fact, unless you just managed to catch it in time, you probably saw the bus coming a block away or so, which gives you plenty of time to discover that your bus card is not in the pocket of your backpack that you thought it was and frantically search for it before (whew) finding it... all without making several other people wait.

What would be even more speedy, though, would be to be more organized on an even higher level: always keep your bus pass in the same place (infrequent riders, of course, won't benefit from this). I generally ride by bike when I take the bus, which means I have to load the bike on the front before boarding. It's not really possible to load it while holding a bus card, but I still manage to have it out and ready by the time I walk around to the front door and pay terminal thing. That's because it's always in the same spot in my wallet.
<h4>Making Titles For Wrap-Up Sections Sucks</h4>
The connection of this post to programming is perhaps tenuous, but hopefully you can see where I'm going. I wish laypeople knew just a little about thinking in this way and applied it to stuff like this. I like to think doing so has made my life easier and I feel like it's let me be more courteous to those around me.

Also, this was intended to be my February post, but I was trying to come up with another example. In the interest of staying in the habit of posting, though, I'm just going to hit publish and call it done. Feel free to complain about that in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2010-03-02 04:00:35</wp:post_date>
		<wp:post_date_gmt>2010-03-02 04:00:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>efficiency-in-algorithms-everywhere</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="naval-gazing"><![CDATA[naval gazing]]></category>
		<category domain="category" nicename="rants"><![CDATA[rants]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Open Source Fail</title>
		<link>http://garbled.benhamill.com/2010/04/open-source-fail/</link>
		<pubDate>Fri, 16 Apr 2010 14:00:15 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[Currently, this blog runs on a great Rails-based blog engine called <a href="http://www.enkiblog.com/">Enki</a>. I initially installed it here because I liked the idea of hacking on the engine a bit or looking under the hood as a learning experience. And it was educational, at first, but more and more, I find that I don't really want to mess with it. I'd rather the blog Just Work.

I'm thinking I might look at installing Wordpress and running Garbled that way. I'm not sure how it'll go, exactly, and it feels a little dirty, being php and all. But, really, blog software isn't something I really have a big interest in. I suspect that the Wordpress code base might not be as awesome as I'd like, but, honestly, I won't have to look at it and it has a lot of neat features that I've gotten used to on the <a href="http://rockmost.wordpress.com/">other blog</a> that I write at.

However, the real driving factor is in the idea that Wordpress is so widely used and stable. Comments have been broken here for a while and I've been too busy, distracted and/or lazy to track down why. In fact, as I was writing this, @<a href="http://twitter.com/jcsalterego/">jcsaltergo</a> discovered that I was having some kind of Passenger issue. Then it vanished. I don't really relish tracking it down.

I'm hoping that I can make the URL for the feed stay the same, but in case I can't, consider this fair warning, that you might have to resubscribe when it breaks. Similarly, I'll have to see what the best way to port all the posts is. I'm suspecting the copy/paste will win for simplicity.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2010-04-16 14:00:15</wp:post_date>
		<wp:post_date_gmt>2010-04-16 14:00:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>open-source-fail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meta"><![CDATA[meta]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Xavier Shay]]></wp:comment_author>
			<wp:comment_author_email>notreal@rhnh.net</wp:comment_author_email>
			<wp:comment_author_url>http://rhnh.net</wp:comment_author_url>
			<wp:comment_author_IP>203.206.182.133</wp:comment_author_IP>
			<wp:comment_date>2010-05-06 23:11:42</wp:comment_date>
			<wp:comment_date_gmt>2010-05-07 04:11:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Even though you said these aren't working, I had to try anyway :)

Good decision - as you've said, Enki is a DIY solution, you need to roll up your sleeves. That's not for everyone all the time (I'm about to launch another blog, and it's not running on Enki), especially after you've learned the lessons.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[benhamill]]></wp:comment_author>
			<wp:comment_author_email>ben@benhamill.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.benhamill.com</wp:comment_author_url>
			<wp:comment_author_IP>70.120.198.66</wp:comment_author_IP>
			<wp:comment_date>2010-05-06 23:53:15</wp:comment_date>
			<wp:comment_date_gmt>2010-05-07 04:53:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Actually, you're commenting on the Wordpress blog already. This is be converting over. By the way, thanks for commenting and giving me some examples to look at while I bang on the CSS still. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Final Post</title>
		<link>http://garbled.benhamill.com/2010/05/final-post/</link>
		<pubDate>Thu, 06 May 2010 14:20:02 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[This will be my final post on this blog, but that's not as dramatic as it seems. I've been setting up a Wordpress install over at <a href="http://garbled.benhamill.com/">http://garbled.benhamill.com/</a> and moving all the posts over there. I'm still messing with CSS to make it look right, but that'll just be a little while. If you like, you can go ahead and subscribe to <a href="http://garbled.benhamill.com/feed/">the feed</a> over there. After this post, all new posts will go into Wordpress.

In a couple of months, I'll make it so that http://blog.benhamill.com/ points at the Wordpress install, too, which will probably break your feed if you're subscribed to this one. So, go ahead and change your feed or bookmark or whatever. The first new post on the new engine will be about the ruby gem I just released about 20 minutes ago.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2010-05-06 09:20:02</wp:post_date>
		<wp:post_date_gmt>2010-05-06 14:20:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>final-post</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meta"><![CDATA[meta]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My First Ruby Gem</title>
		<link>http://garbled.benhamill.com/2010/05/my-first-ruby-gem/</link>
		<pubDate>Fri, 07 May 2010 14:00:03 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[I just released my first ruby gem, <a href="http://rubygems.org/gems/twitter_alert">twitter_alert</a>. It's intended to be a component of the side project <a href="http://garbled.benhamill.com/2009/09/new-side-project-heygovote/">I mentioned</a> forever ago, HeyGoVote. It grabs all the followers for a Twitter account and DMs them a message. The messages have dates on them because their intended to be schedule ahead of time. I'll crib from the readme near the end, but if you want, you can <a href="http://github.com/BenHamill/twitter_alert">go read the whole thing for yourself</a>. First, I'm going to talk a bit about my experience writing my first gem.
<h4>Jeweler</h4>
I used the <a href="http://github.com/technicalpickles/jeweler">jeweler</a> gem to create a gem template for this guy. It's very simple and was a huge boon considering this was my first time. It scaffolds out the directory structure for you, sets up some handy rake tasks and generally gives you guidance on how to structure your gem. The readme for jeweler is very helpful. I won't bother to restate what it says, but seriously, new to gems or not, you should have a look at jeweler if you haven't already. One of the nicest things is that it'll generate your gemspec file for you and also handle version bumping in a <a href="http://semver.org/">semantic versioning</a> compatible way. It also integrates with git and <a href="http://github.com">GitHub</a> in some interesting ways.
<h4>Gemcutter</h4>
Jeweler will also handle publishing your gem to "gemcutter" for you, which is nice. I say that in quotes because, of course, gemcutter.org is no longer a thing and their stuff all got officially adopted by <a href="http://rubygems.org">rubygems.org</a>, so it actually publishes to there. The jeweler documentation, though, all acts as if gemcutter were still a separate thing. This could be potentially confusing, I guess, but it ends up working right, so it's fine. It does use the gemcutter gem to manage the publishing, so you'll have to have that installed, and make sure you have a rubygems.org account and api key set up. The api key goes in ~/.gem/credentials as you'll learn on your rubgems profile.
<h4>twitter_alert</h4>
I'll crib from my readme example to show the most basic setup:
<pre lang="ruby" line="1">require 'twitter_alert'

account = TwitterAlert::Account.new :user_name => 'benhamill', :password => 'thisisnotmyrealpassword'

class Alert
  include TiwtterAlert::Alert
end

alert = Alert.new 'Very important message.', DateTime.now

account.announce alert</pre>
In the wild, I don't imagine that your Alert class will be so simple. For instance, when I plug this into HeyGoVote, it'll be included in an ActiveRecord model so I can run a cron job that pulls out tweets that should go out today (based on the date) and sends them all.

I haven't plugged this into code yet, and note the version number 0.1. The tests pass, but they may not be comprehensive and I might have botched something up in my publishing, but it looks like everything's working to me. My next step is to start building up HeyGoVote and using twitter_alert in it, which might reveal some needed features. In the meantime, I welcome feedback. Leave a comment here, or <a href="http://github.com/BenHamill/twitter_alert">fork it</a> and issue me a pull request, if you have an idea.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2010-05-07 09:00:03</wp:post_date>
		<wp:post_date_gmt>2010-05-07 14:00:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-first-ruby-gem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="heygovote"><![CDATA[heygovote]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[Garbled &raquo; Blog Archive &raquo; How Do You Make a Gem?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://garbled.benhamill.com/2010/06/how-do-you-make-a-gem/</wp:comment_author_url>
			<wp:comment_author_IP>75.119.201.3</wp:comment_author_IP>
			<wp:comment_date>2010-06-10 12:47:02</wp:comment_date>
			<wp:comment_date_gmt>2010-06-10 17:47:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is not intended to be a how-to. I sort of talked a bit about that before. I&#8217;m writing this post because, as I breathlessly blogged before (alliteration!), I released [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>How Do You Make a Gem?</title>
		<link>http://garbled.benhamill.com/2010/06/how-do-you-make-a-gem/</link>
		<pubDate>Thu, 10 Jun 2010 17:00:41 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[This is not intended to be a how-to. I sort of talked a bit about <em>that</em> <a href="http://garbled.benhamill.com/2010/05/my-first-ruby-gem/">before</a>. I'm writing this post because, as I breathlessly blogged before (alliteration!), I released my <a href="http://rubygems.org/gems/twitter_alert">first gem</a>. I then immediately turned around to start using it. And it was terrible. Yay for version 0.1! So I'm going to try something else.

The thing that sucked so bad was the API, basically. I didn't <em>really</em> know how I wanted to use it or how best to fit it into a Rails app. I made a reasonable guess and got to work. It wasn't a terrible first try, but it <em>was</em> a terrible API. However, I'm not sure what better looks like yet. And I think that I sort of got ahead of myself; I put the cart before the horse.

It's a little like making the transition from drawing on paper to creating art with the GIMP. When you're on paper, you draw the stuff that's in front first and you only draw as much of the stuff that's behind other stuff as can be seen. So you learn to think a certain way about how you build up your picture. In a program that has layers, you can draw in any old order and draw something entirely even if it's obscured by something else in the long run.

I was thinking that the obvious path would be to develop my little gem of functionality and then use it in the larger Hey Go Vote application. Now I'm starting to think that's backwards. I'm going to just work on Hey Go Vote and trust that doing so will give me insight into what parts of the announcement machinery can be made portable. Then I'll extract those bits into a gem and refactor Hey Go Vote to use the new gem. I'm sure I'll let you know how that goes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2010-06-10 12:00:41</wp:post_date>
		<wp:post_date_gmt>2010-06-10 17:00:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-do-you-make-a-gem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="heygovote"><![CDATA[heygovote]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="projects"><![CDATA[projects]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Modeling Dominion</title>
		<link>http://garbled.benhamill.com/2010/10/modeling-dominion/</link>
		<pubDate>Fri, 22 Oct 2010 13:00:37 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[Over the past, roughly, 8 months I have gotten into playing a game called <a href="http://riograndegames.com/games.html?id=278">Dominion</a>. It's a card game that is often mistaken for Magic: The Gathering, but in many ways it plays more like some of the more complex board games out there (of which Settlers of Catan may be the most widely known, but not the best example for comparison). In it, there is a pool of common cards which each player may purchase on their turn via a currency mechanic. Cards purchased go into your deck which is drawn from  to make hands and periodically shuffled. It has a bit of the deck-building meta-game of Magic, but in a more primary role and without the annoying, money-sink aspect that collectible card games have. Everyone at the table is drawing from the same central pool of cards, so you can't spend your way into a better deck between games.

Another aspect that I really like is that the pool of cards for purchase is not the same for each game. You (generally) randomly select 10 types from the box. The initial release had something like 28 types in it. There have been expansions released to add variety, but remember, it's not a CCG, so buying expansions doesn't give an advantage to any player over others except, I suppose, that they'll have greater familiarity with what the cards do. I don't want to get too into the rules and how the games works. Rio Grande has the rules available as a PDF, so you can go read them in full at the link above. What I really want to talk about is a little hacking exercise that I got into because of the game. Henceforth, I'll assume you've at least read the base rules.
<h4>The Discussion</h4>
I've been playing at lunch with some of the guys at work and I got into a discussion with @<a href="http://twitter.com/hoonpark/">hoonpark</a> after one such game. The strategy we were discussing was using Chapel and Treasure Map together. For quick reference, Chapel lets you trash up to 4 (other) cards from your hand and Treasure Map lets you, if you have two in your hand, trash both and then put 4 Golds on top of your deck. The idea was to use the Chapel to reduce your deck size such that the likelihood of getting both your Treasure Maps at the same time went way up and then for most of your deck to just be Golds (with which you would buy Provinces). We disagreed on the exact particulars of how it should be played most optimally and I said, "I bet I could code up a simulator that would play this strategy a ton and give us real statistics." I think the original debate might have been over whether you try to make two pairs of Treasure Maps work before starting to buy Provinces. At least, that's what I thought would be best, at first. So I got to work the other evening and coded up the following in two or three sittings. Probably a total of an hour and a half or two.
<h4>The Simulation</h4>
I have the code <a href="http://github.com/benhamill/dom_model">up on github</a>, or you can look at <a href="http://gist.github.com/639607">this gist</a>. It's messy as hell and you can tell I sort of just wrote it as I thought of it. I did one refactor, which ended up creating the Player class. That part is probably fairly reusable. The other file could probably be refactored and some bits reused. I want to draw your attention to the commented out lines. I made it so that you can uncomment all the puts statements and run it once to see how just one games goes (which might help you learn to replicate the strategy) or you can run it a bunch and just see a summary. I also ran it several times stopping after buying various numbers of Provinces (3 to 6 ended up being interesting).

As I mentioned above, the original idea was to make Treasure Maps work twice before acquiring Provinces. That ended up taking something like 17 turns on average to get 4 Provinces. When I showed it to Hoon, that didn't match up with his anecdotal experience, so we looked at the difference between what he'd done (much faster) and what I was seeing. After making it so that the bot would only ever do one pair of Treasure Maps, the turn numbers dropped significantly. Another thing that was different was that Hoon would occasionally buy Silver (if he had less than 5 coins) or, say he drew 2 Golds, 2 Coppers and his Chapel, he would not Chapel the Copper and buy a Province. I think we've determined that doing those intuitive things are actually slower than taking the turn to do nothing in the first case or Chapeling the Copper and just buying a Gold.
<h4>The Data</h4>
The data out of this simulation looks like this (I ran 100,000 games):
<ul>
	<li>To acquire 3 Provinces, it takes a minimum of 11 turns, max of 13 and average of 13.93</li>
	<li>To acquire 4 Provinces, min: 12, max: 14, avg: 13.93</li>
	<li>To acquire 5 Provinces, min: 15, max: 17, avg: 16.93</li>
	<li>To acquire 6 Provinces, min: 16, max: 18, avg: 17.93</li>
</ul>
Notice the gap between 4 and 5. It's spending those two turns buying Gold , probably. I might, for my own curiosity, run it where it buys Duchies instead, but that could have a slowing effect on the following two turns. Speaking of slowing effects, one thing that I found particularly interesting is that if you don't ever Chapel Estates away, it dramatically increases turn counts. I set a limit of 100 turns and didn't count those just as a practicality issue. When running this the published way, I never hit it. When running it without Chapeling Estates, you hit it so often that the simulation took long enough that I got worried and killed it. That's just 3 krufty cards making a huge difference and really underscores why lean deck strategies are often so powerful.
<h4>The Limitations</h4>
The biggest limitation of this simulation is that it's playing in a vacuum. There are no opponents and, more pertinently, no one playing Attack cards (or Masquerade, etc.). If an opponent were to bring Theif to the table, that could be potentially murderous to this strategy. I'm not really sure how the simulation would account for that, anyway. I guess you could figure out tons of strategies, then generate sets of Kingdom Cards and see how they fared against each other in various permutations. That sounds like a) a ton of work for me (or another human), b) a ton of work for some computer somewhere and c) like it might take some of the intuitiveness and gut-checking that I find enjoyable in Dominion. So I don't think I'll be chasing that down. I <em>might</em>, however, code up a few other strategies to see how they fare. It would be pretty simple to do a "Just Buy Money" to establish a baseline and a Chapel/Remodel; maybe Village/Smithy, since that's popular and simple.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2010-10-22 08:00:37</wp:post_date>
		<wp:post_date_gmt>2010-10-22 13:00:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>modeling-dominion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="dominion"><![CDATA[dominion]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Release: twitter_atm 1.0</title>
		<link>http://garbled.benhamill.com/2011/01/release-twitter_atm-1-0/</link>
		<pubDate>Fri, 14 Jan 2011 15:00:19 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=38</guid>
		<description></description>
		<content:encoded><![CDATA[Holy crap. Did I really start this blog in December 2008? That would make it more than 2 years old. Wow. Well, good on me, I guess. That feels sort of absurd. Anyway...
<h4>An Itch...</h4>
The other day at <a title="OtherInbox" href="http://www.otherinbox.com" target="_blank">work</a>, I had to get the OAuth credentials for a twitter account that our application would use to send programmatic tweets to. For those of you not familiar with OAuth, a brief description: The usual way you OAuth with Twitter is that you have a web page where a user clicks something indicating they'd like to OAuth you to their account. You then send your consumer key and secret off to Twitter to get a request token and, using that, you send the user off to a url over on twitter.com.

Once there, they sign in (or are already signed in) and click "Allow". Twitter then hits your callback url with some more tokens, which you use to make a final reply and then they respond with the access token and secret you'll need to do whatever it is you're doing with the user's account. If the user changes username or password, you're still authorized and if they want to revoke your access, they can without changing their username or password<em>. </em>Great! (If you're thinking, "What?!? Not great! That made no sense!" then maybe the image in <a title="OAuth Documentation on dev.twitter.com" href="http://dev.twitter.com/pages/auth#intro" target="_blank">this article</a> will help).

However, when your program is a desktop client or when you've only got one account you'll ever be tweeting from (or maybe a small handful), it's not really practical to build a web interface and a callback url to hit so that you can do the whole dance and get the tokens. So Twitter has an alternate path that replaces the redirects in the middle of the dance. Instead of redirecting users over to twitter.com, you show them the URL and they go there manually. When they click "Allow", they're given a PIN, which they then give back to you and you can then finish off the dance as if the PIN were the callback.
<h4>...Scratched</h4>
So at work, I hacked around in the console for a bit and eventually figured out how to work the PIN-based method, ran it for the account I wanted and then got the access token and secret for our account. But, I thought, I shouldn't have to hunt all around to figure out how it works (the documentation is almost all focused on the callback path). Heck, if I know my consumer key and secret and I own the account, I shouldn't need to know how it works at all. So, having figured out how it works already, I decided I'd write a little command to do it for me and publish it as a gem. Thus was born <a title="Github repo" href="https://github.com/benhamill/twitter_atm" target="_blank">twitter_atm</a>.
<h4>The Tool</h4>
As the README states, it's pretty simple. You invoke <code>twitter_atm get_creds</code> with your consumer key and secret as arguments, then it interactively gives you directions on how to finish out the process and spits out the access token and secret at the end. I do want to note, about the name, it's not about cash. It's about inputting a PIN and getting something in return. It's not very exciting to use, so I won't talk about it much. I'd rather move on to...
<h4>An Old God of Asgard</h4>
This was the first time I'd written a program with a command line interface, so I asked around a little about gems that were good at that and Jonathan Otto (of <a title="Dealzon main site." href="http://dealzon.com" target="_blank">Dealzon</a>) pointed me at <a title="thor gem on Github" href="https://github.com/wycats/thor" target="_blank">thor</a>. In short, thor seems awesome. It's got a nice DSL for describing the various subcommands of your application and it looks deep enough to handle something more complex than my purposes with twitter_atm.

As a brief example, consider <code>git pull --rebase origin master</code>. If you were writing something that would support this syntax in thor, it would look something like this (I made up the git commands inside off the top of my head, so it's a bit naive):

<pre lang="ruby" line="1">class Git < Thor
  desc "git pull", "Fetches and merges stuff into the current branch."
  method_options :rebase => :boolean
  def pull(remote, branch)
    `git fetch #{remote}`

    if options[:rebase]
      `git rebase #{remote}/#{branch}`
    else
      `git merge #{remote}/#{branch}`
    end
  end
end</pre>

You can also declare different types of options, default values, etc. Have a look at the fairly extensive readme and look at <a title="/bin/twitter_atm" href="https://github.com/benhamill/twitter_atm/blob/develop/bin/twitter_atm" target="_blank">how I used it in twitter_atm</a> if that helps. I quite recommend the gem and already have another project I'd like to use it on.
<h4>bundle gem twitter_atm</h4>
There's this little project--I don't know if you've heard of it--called <a title="Bundler website." href="http://gembundler.com/" target="_blank">bundler</a>. It was started by a <a title="Carl Lerche on Github" href="https://github.com/carllerche" target="_blank">couple of up-and-coming young programmers</a> <a title="Yehuda Katz on Github" href="https://github.com/wycats" target="_blank">who really might go somewhere some day</a>. Bundler is great for managing gems in a big project and it does this really impressive dependency resolution thing. But there's a lesser known command that I've fallen in love with: <code>bundle gem &lt;gem_name&gt;</code>. It just makes a skeleton for a gem project for you. Unlike <a title="Jeweler on Github" href="https://github.com/technicalpickles/jeweler" target="_blank">Jeweler</a>, it only gives you the bare minimum and really just gets out of your way. You manage your own version number and <a title="Yehuda on using .gemspec files &quot;correctly&quot;." href="http://yehudakatz.com/2010/04/02/using-gemspecs-as-intended/" target="_blank">write your own gemspec</a> (gasp!).

It has three handy rake tasks with obvious functions: <code>rake build</code>, <code>rake install</code> and <code>rake release</code>. Each of those for the most part just issue various <code>gem</code> commands. I basically like it because it builds you a little foundation and then doesn't really manage anything else for you. One thing that's important to note: The current version of bundler doesn't add <code>Gemfile.lock</code> to the <code>.gitignore</code> that it generates (but future versions will), and it is important that you do so. Yehuda has a <a title="Yehuda on Gemfile and .gemspec" href="http://yehudakatz.com/2010/12/16/clarifying-the-roles-of-the-gemspec-and-gemfile/" target="_blank">blog post</a> explaining why.

So, based on this experience, here's what <em>I</em> took away: Thor is good to use for making a CLI, <code>bundle gem</code> is good to use for making a gem and sometimes you can make something small and cool for yourself in one sitting which gives you a good feeling and is a well invested 5 hours.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2011-01-14 09:00:19</wp:post_date>
		<wp:post_date_gmt>2011-01-14 15:00:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>release-twitter_atm-1-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="otherinbox"><![CDATA[otherinbox]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="projects"><![CDATA[projects]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Falsiness and Null Objects</title>
		<link>http://garbled.benhamill.com/2011/06/falsiness-and-null-objects/</link>
		<pubDate>Wed, 01 Jun 2011 13:00:18 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[Recently, I went to <a href="http://railsconf.com">RailsConf</a>. I saw a bunch of talks and met some cool people. This is not a RailsConf post-mortem post (if you're interested, though, I've collected some notes from myself and some others <a href="https://github.com/benhamill/railsconf_2011">here</a>). This post is about what, in retrospect, was probably the best talk I went to (and I went to several really awesome talks). I've been mulling over it since I got back, basically, and that seems like a good result from a talk. That talk was <a href="http://avdi.org">Avdi Grimm</a>'s Confident Code (<a href="http://avdi.org/talks/confident-code-railsconf-2011/">slides</a>, <a href="https://github.com/benhamill/railsconf_2011/blob/master/confident_code.txt">my notes</a>).

One thing in particular sort of caught at the edge of my thought patterns: <a href="http://en.wikipedia.org/wiki/Null_Object_pattern">The Null Object Pattern</a>. I don't have a CS degree and so I'm missing a lot of the formal training about design patterns that many programmers have (and, probably, forget), so I'd never heard of it. When Avdi started talking about how ActiveRecord's <code>try</code> method is a code smell, I was like, "Yes!" I would not say that I hate it, but I have seen several times some line of code that looks like this:

<pre lang="ruby" line="1">@user.try(:posts).try(:recent).try(:first)</pre>

I mean... bleh. But I didn't know a way that looked any better to me, really. Anyway, you can look at <a href="https://github.com/benhamill/railsconf_2011/blob/master/confident_code.txt">the notes</a> and <a href="http://avdi.org/talks/confident-code-railsconf-2011/">slides</a> to learn about what Avdi says about the Null Object Pattern. I thought it was awesome and so when I went home, I decided to take it for a test drive.

<h4>The Test Course</h4>
So in a project at work, we have Users and they may or may not have one Subscription. Hopefully, you can picture this complex object graph. Subscriptions may or may not be "current" based on various business rules mostly to do with whether you paid us or not. So, naturally, we have a <code>Subscrption#current?</code> method. But we're using the User as a sort of presenter for Subscriptions. So you don't want to call <code>@user.subscription.current?</code>. That's a code smell. So on User we had this method:

<pre lang="ruby" line="1">def current?
  subscription.try(:current?)
end</pre>

There's that rascal <code>try</code>. "This," I thought, "is a perfect spot for that <code>Maybe</code> method from Avdi's talk." So I rewrote it thusly:

<pre lang="ruby" line="1">def current?
  Maybe(subscription).current?
end</pre>

W00t, right? Wrong. The accompanying <code>NullObject</code> class looks like this:

<pre lang="ruby" line="1">class NullObject
  def method_missing(*args, &block)
    self
  end

  def nil?
    true
  end
end</pre>

That method missing treatment, so handy in avoiding the chain of <code>try</code>s in my first example, is the gotcha. It means that if I have a User without a Subscription for whatever reason, calling <code>User#current?</code> returns an instance of <code>NullObject</code>, which will pass, say, the boolean clause of an <code>if</code> statement.

So, not sure as to whether I'd misunderstood something, was making some dumb mistake or what, I emailed Avdi. He said, basically, "Awesome question. I will answer it in a blog post." And, lo, <a href="http://avdi.org/devblog/2011/05/30/null-objects-and-falsiness/">he did</a>. Go read <a href="http://avdi.org/devblog/2011/05/30/null-objects-and-falsiness/">that post</a> to see <a href="http://avdi.org/devblog/2011/05/30/null-objects-and-falsiness/">what he said</a>. The comments also have some good ideas.

<h4>Noodles</h4>
If you read my comment, I said I was going to noodle on stuff and post again. I had more thoughts than it seemed like would fit in a blog comment. Hence this post. So my initial thought was disappointment. It turned out the Null Object Pattern wasn't as powerful (in Ruby) as I'd hoped, since if you might have something (calling <code>Maybe</code>) the chances that you'll have some conditional asking a boolean business-rule question about it is not low.

So I thought about how to get around that. You could, for instance, make a more complex <code>method_missing</code> definition that grepped the message name for <code>/\?$/</code> and returned false. That's fail, though. It falls down the moment you have something like this:

<pre lang="ruby" line="1">if Maybe(@posts).empty?
  # Intuitively, you'd expect NullObject#empty? to have put you in here.
end</pre>

But then I realized that Avdi was making a higher-level point: since it is not possible to make your own objects look falsey in Ruby, you have to have another solution. Trying to define various question-mark methods on <code>NullObject</code> is trying to untie the knot, but I should be looking for a way to cut it. So it got me thinking: Why the hell to I have Users without Subscriptions, anyway? Shouldn't <code>User#current?</code> express that business logic clearly, rather than just express the logic that enforces it? Yes. Yes, it should.

We have some Users who are also admins, who have special rights. It's also conceivable that we could give away a free account for whatever reason. So, really, we want something like this:

<pre lang="ruby" line="1">def current?
  self.free_account? || subscription.current?
end</pre>

But, this thought it incomplete. It expresses the business logic cleanly: The User is current if they're flagged as free or if their Subscription is up to date. However, if the weird case of a User who is neither free nor has an associated Subscription crops up, we still have to hunt down the "Undefined method 'current?' for nil" error. It sort of has be reaching for <code>Maybe</code> again.

Or maybe (heh, you see what I did there) I want to steal another trick from Avdi's presentation and have <code>User#subscription</code> return <code>:no_subscription_defined_for_user</code> so that the error message makes some more sense. I don't like redefining <code>ActiveRecord</code>'s default accessor methods, though, to transparently return the symbol if the real object is missing.

If you've got any thoughts, I'd love to hear them.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2011-06-01 08:00:18</wp:post_date>
		<wp:post_date_gmt>2011-06-01 13:00:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>falsiness-and-null-objects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="naval-gazing"><![CDATA[naval gazing]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>101</wp:comment_id>
			<wp:comment_author><![CDATA[Avdi Grimm]]></wp:comment_author>
			<wp:comment_author_email>avdi@avdi.org</wp:comment_author_email>
			<wp:comment_author_url>http://avdi.org/devblog</wp:comment_author_url>
			<wp:comment_author_IP>174.55.88.101</wp:comment_author_IP>
			<wp:comment_date>2011-06-01 13:35:44</wp:comment_date>
			<wp:comment_date_gmt>2011-06-01 18:35:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Off-the-cuff thoughts:

First of all, I never got a CS degree either. Everything I know I learned from spending hours and hours reading WardsWiki, a practice I highly recommend. That and a few books.

I know some people who would say its time to put in a DB constraint that enforces the "non-free accounts must have a subscription" rule. I think they make a good point.

Leaving that solution aside, I think I'd probably give the #subscription field a default value which is a lightweight Special Case object, something like this:

    def subscription
      read_attribute(:subscription) || OpenStruct.new(:current? =&gt; free_account?)
    end

Then current simply becomes:

    delegate :current?, :to =&gt; :subscription

(I have not tested this code, it may need to be tweaked)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1306953344.8745";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1306953885.0531";s:7:"message";s:48:"benhamill changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"benhamill";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[Garbled &raquo; Blog Archive &raquo; The Parameter Object Pattern]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://garbled.benhamill.com/2012/01/the-parameter-object-pattern/</wp:comment_author_url>
			<wp:comment_author_IP>75.119.201.3</wp:comment_author_IP>
			<wp:comment_date>2012-01-04 09:07:36</wp:comment_date>
			<wp:comment_date_gmt>2012-01-04 15:07:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] paying more attention to software design patterns recently. It all started with my noticing the Null Object pattern and the Ruby Rogues talking about Smalltalk Best Practice Patterns. My most recent discovery is [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325689656.5785";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325691103.1865";s:7:"message";s:48:"benhamill changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"benhamill";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>A Smarter has_many :through?</title>
		<link>http://garbled.benhamill.com/2011/08/a-smarter-has_many-through/</link>
		<pubDate>Thu, 25 Aug 2011 19:00:05 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[At work, I've been expending a lot of effort on this complicated search functionality where you can enter a search phrase that will full-text search over one model's fields (we're using <a href="http://tenderlove.git.hub.com/texticle/">texticle</a> [<a href="https://github.com/tenderlove/texticle">github</a>], which is awesome) and limit the results by which other models are involved relationally. Sort of like searching Amazon for "green converse" and choosing the "shoes" category.

The object graph behind this is pretty complicated and it's been a real education in SQL trying to make sure the query that gets generated is both reasonably speedy and right. Several times, I've gotten it "working" only to realize I was joining in some table more than once and so either returning some record twice or excluding it when I shouldn't've or joining all rows against all rows and, thus, making everything pass all constraints. My SQL skill has leveled up several times throughout, though, which has been really awesome. This is mostly because I was hand-writing a lot of the join SQL with table aliases and whatnot.

<h4>Example</h4>
The other day, I realized that Rails 3 (or, anyway, the 3.1 release candidates, which is what this app is using) will let you do something that earlier versions would not: do a <code>has_many :through</code> relation on another <code>has_many :through</code>. Say you've got Departments composed of Employees. Employees work in groups to create Widgets and which, in turn, get Tags. You can do this number:

<pre lang="ruby" line="1">class Widget < AR::Base
  has_many :tags
  has_many :employees

  has_many :departments, :through => :employees
end

class Tag < AR::Base
  belongs_to :widget

  has_many :employees, :through => :widget
  has_many :departments, :through => :employees
end

class Employee < AR::Base
  belongs_to :widget
  belongs_to :department

  has_many :tags, :through => :widget
end

class Department < AR::Base
  has_many :employees

  has_many :widgets, :through => :employees
  has_many :tags, :through => :widgets
end</pre>

Which enables stuff like:

<pre lang="ruby" line="1">Department.joins(:tags).where(:tag => { :id => params[:tag_id] })</pre>

<h4>The SQL</h4>
So, though, since I was hand-writing my <code>JOIN</code> statements before, I'm clearly concerned with what, exactly, it's going to execute against the database. So I pulled out good ol' <code>ActiveRecord::Base#to_sql</code> to see. Here's what I got (edited without all the quoting and with newlines):

<pre lang="sql" line="1">SELECT departments.* FROM departments
INNER JOIN employees ON employees.department_id = departments.id
INNER JOIN widgets ON widgets.id = employees.widget_id
INNER JOIN tags ON tags.widget_id = widgets.id
WHERE tags.id = 3</pre>

Hopefully, that query is pretty straight forward and you can see how ActiveRecord has decided how to make all those joins. However, something struck me: I'm joining through with <code>widgets</code> table, but both <code>employees</code> and <code>tags</code> already have <code>widget_id</code> on them. I'd rather have seen something like:

<pre lang="sql" line="1">SELECT departments.* FROM departments
INNER JOIN employees ON employees.department_id = departments.id
INNER JOIN tags ON tags.widget_id = employees.widget_id
WHERE tags.id = 3</pre>

The result set should be the same and it's slightly faster. In this example, joining through the extra table wouldn't be a big hit, probably, but if we've got more objects all related to Widgets and many are, like Departments, related through some other object, we might be (and in my case often are) joining many more tables, so if we can eliminate middle-man joins, it can have an appreciable effect on the query's speed.

<h4>How We Do It</h4>
So it turns out you <em>can</em> make ActiveRecord generate the above SQL. You don't want <code>has_many :through</code> for the second association. If you do like this:

<pre lang="ruby" line="1">class Department < AR::Base
  has_many :employees

  has_many :widgets, :through => :employees
  # has_many :tags, :through => :widgets
  has_many :tags, :foreign_key => :widget_id, :primary_key => :widget_id
end</pre>

You can use the same ActiveRecord query syntax from above to generate the second SQL example. It's a lot of typing, though, so I wondered: Wouldn't it be awesome if ActiveRecord knew you when you had this matching-middle-man-foreign-key situation in a query and generated the leaner SQL?

I'm not sure if there are pitfalls to this I'm not seeing (especially related to uses outside what I'm doing with it right now), but I've started digging around in the Rails source to see where it's thinking about these kinds of things (led me to <code>lib/active_record/associations/join_dependency/join_association.rb:72</code> so far). I'd love some thoughts and feedback on these ideas or guidance in my code-diving efforts. I expect I may end up in the Arel source at some point... we'll see where it takes me.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2011-08-25 14:00:05</wp:post_date>
		<wp:post_date_gmt>2011-08-25 19:00:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-smarter-has_many-through</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code"><![CDATA[code]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>103</wp:comment_id>
			<wp:comment_author><![CDATA[rossdavidh]]></wp:comment_author>
			<wp:comment_author_email>ross.hartshorn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://rosshartshorn.net</wp:comment_author_url>
			<wp:comment_author_IP>66.90.154.201</wp:comment_author_IP>
			<wp:comment_date>2011-08-25 20:59:38</wp:comment_date>
			<wp:comment_date_gmt>2011-08-26 01:59:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, I see where you're going, but if the default behavior is to look for this and generate the leaner query, without explicitly asking for it, my gut tells me that you will occasionally give someone a circular join or other nastiness, and they won't have any idea why.  More typing is another way of saying, "I have looked into it and understand the risks."

But then, my gut doesn't know all that much SQL.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314323978.2942";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314325727.5897";s:7:"message";s:48:"benhamill changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:9:"benhamill";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>The Parameter Object Pattern</title>
		<link>http://garbled.benhamill.com/2012/01/the-parameter-object-pattern/</link>
		<pubDate>Wed, 04 Jan 2012 14:00:41 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[I have been paying more attention to software design patterns recently. It all started with my noticing the <a title="Falsiness and Null Objects" href="http://garbled.benhamill.com/2011/06/falsiness-and-null-objects/">Null Object pattern</a> and the <a title="Ruby Rogues podcast" href="http://rubyrogues.com/" target="_blank">Ruby Rogues</a> talking about <a title="Amazon Link" href="www.amazon.com/Smalltalk-Best-Practice-Patterns-Kent/dp/013476904X/" target="_blank">Smalltalk Best Practice Patterns</a>. My most recent discovery is of the <a title="Parameter Object pattern @ WikiWiki" href="http://c2.com/cgi/wiki?ParameterObject" target="_blank">Parameter Object pattern</a>. Thanks, by the way, to @<a title="Tim's Twitter page" href="http://twitter.com/timtyrrell" target="_blank">timtyrrell</a> for telling me the name of it.

As I've <a title="A Smarter has_many :through?" href="http://garbled.benhamill.com/2011/08/a-smarter-has_many-through/">mentioned before</a>, I've been spending some time <a title="OtherInbox" href="http://otherinbox.com/" target="_blank">at work</a> with a search engine. It works sort of like NewEgg's search in that you might type a string in ("desktop ram") and then narrow your search by clicking on links in a side bar (DDR3 or Corsair). The search engine in question powers a product called <a title="SubjectLin.es" href="http://subjectlin.es" target="_blank">SubjectLin.es</a> (it's in beta; you can sign up for a free account to try it out, if you like) where you can search for words that appear in an email subject and then further limit by, say, who sent it ("sender"), what kind of email it is (like coupon or receipt, we call it a "tag") or what business the sender was in ("market").

To date, I've rewritten the search engine a few times and refactored it a few times. It and one other area of the code base are, by far, the most complex bits of the application, so it has gotten it's fair share of attention. And it's gotten more recently when an exception brought our attention to something: We don't have one search engine... we have <em>four</em>. It's just that they're all in one class. Finding the email subjects that a user is interested in is not really related to finding the senders who sent them except that the user's parameters are the same. So I thought what we'd do is factor out our current search object into 4 smaller ones (subject, sender, tag and market) that each centers around the object it's pulling out of the DB. Besides code clarity, there are some other benefits we get from this modularity, but I don't want to get into that in this post.

So now we're faced with the fact that we'll have 4 objects we want to create that all depend on the same parameters to build themselves. Add to that the fact that we do some fancy Google-style keyword parsing (you can type "some key words sender:Company" and we pull out the company name) and the fact that if the user is interested in limiting by sender, we want to display things differently than if they aren't. Now, I thought, it looked as if we should have an object just about the user's search parameters and that each of our search engines should take only that as an argument.

This way, our view (or presenter... whatever) can ask the search parameter object if the user limited based on sender or not. We can build the one object and then pass it to each of the four engines. We can put all the keyword parsing logic into the search parameter object, too. When I had it, it seemed like such a good idea that it had to have been thought of before. And, lo, it is called the Parameter Object pattern. Or, anyway, I think this is a case of that pattern.

What do you think? Is this Parameter Object? Is it something else? Does my example make any sense at all (I honestly have no idea, since I'm so deep in the system; I tried to balance high-level with need-to-know)? Note: as of this writing, none of this is implemented yet. This is all just design work with @<a title="Macors's Twitter page" href="http://twitter.com/marcosacosta" target="_blank">marcosacosta</a>, so far. If anything interesting crops up while we're writing it, I'll try to remember to update this post.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2012-01-04 08:00:41</wp:post_date>
		<wp:post_date_gmt>2012-01-04 14:00:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-parameter-object-pattern</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="otherinbox"><![CDATA[otherinbox]]></category>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Changems</title>
		<link>http://garbled.benhamill.com/2012/01/changems/</link>
		<pubDate>Thu, 19 Jan 2012 07:00:28 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=47</guid>
		<description></description>
		<content:encoded><![CDATA[The other day, I was listening to the <a title="Ruby Rogues" href="http://rubyrogues.com/" target="_blank">Ruby Rogues</a> podcast (which I recommend). The episode was <a title="The RubyGems Episode" href="http://rubyrogues.com/036-rr-rubygems/" target="_blank">number 36</a>, about Ruby Gems and they had <a title="Nick's Blog" href="http://quaran.to/" target="_blank">Nick Quaranto</a> on as a guest. For those of you who don't know, Nick is the originator of the whole GemCutter thing which eventually became what is now <a title="RubyGems.org" href="http://rubygems.org" target="_blank">RubyGems.org</a>. So he knows a thing or two about gems and, in particular, about the servers that host them all. When you type <code>gem install bundler</code> or whatever, RubyGems.org is where it's (generally) downloading it from.

I digress. At one point, Nick mentioned that he'd like to see more projects using RubygGems.org's API and specifically one doing something interesting with gems' change logs. That, I thought, didn't sound like a terribly complicated app. So I asked him about it on Twitter, and he pointed me to <a title="Version release notes" href="https://github.com/rubygems/rubygems.org/issues/365" target="_blank">a GitHub Issue</a> on the topic. You can read the discussion for yourself, but the short of it is that no one was working on a site yet (as best I could tell), so I decided to, and over the 3-day weekend, I banged out <a title="Changems" href="http://changems.herokuapp.com" target="_blank">Changems</a>.

Right now, there's fake data in the DB just to give an idea of what I'm thinking. The actual task of getting change logs into the app is not even remotely addressed right now. I'm hoping someone else will at least partially solve that problem, since it's really hairy. How opinionated do you get? How much freedom do you allow an author before you throw out their log? Should you go so far as to parse Markdown and try to retain code samples and such? Should you only accept plain text (like my fake data) and blow off people who want to get fancy? Then there's the matter of what people want to call the file (or whether they want to put their change log in the README). Anyway, once those questions at least have rudimentary answers and the site has some real data, I'm sure the community will drive whatever change they feel is appropriate.

Right now, the app is based on the idea that each bullet point in a change log for a version stands alone and is an equal peer with the others from the same version. That might be foolhardy. Maybe each version should just have one big block of data for all the changes; if parsing Markdown or allowing a lot of freedom to make subsections or whatever is important to folks, that would probably be the best bet. But I don't know yet what folks want. So this post is sort of a plea for help, or at least feedback.

Anyway, it's 3 evenings of work from one rubyist, so I'm hoping to get people's thoughts on the topic and maybe some pull requests. If you'd like to talk about it, hit me up on Twitter, or open an Issue on the <a title="GitHub - benhamill/changems" href="http://github.com/benhamill/changems" target="_blank">GitHub repo</a> or, you know, leave a comment here. Also, I threw together the current design, but I am not a designer, so I'd <em>love</em> someone with some actual design chops to send me a pull request. So lemme know: Seem useful? Off to the wrong start? Totally boring? Totally <em>awesome</em>?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2012-01-19 01:00:28</wp:post_date>
		<wp:post_date_gmt>2012-01-19 07:00:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>changems</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="projects"><![CDATA[projects]]></category>
		<category domain="category" nicename="rails"><![CDATA[rails]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[Avdi Grimm]]></wp:comment_author>
			<wp:comment_author_email>avdi@avdi.org</wp:comment_author_email>
			<wp:comment_author_url>http://avdi.org/devblog</wp:comment_author_url>
			<wp:comment_author_IP>174.54.254.105</wp:comment_author_IP>
			<wp:comment_date>2012-01-19 14:35:37</wp:comment_date>
			<wp:comment_date_gmt>2012-01-19 20:35:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Haha, thanks for the NoneSuch reference :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327005337.7639";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Install Ruby Enterprise Edition With ruby-build On Arch Linux</title>
		<link>http://garbled.benhamill.com/2012/02/install-ruby-enterprise-edition-with-ruby-install-on-arch-linux/</link>
		<pubDate>Fri, 03 Feb 2012 20:43:57 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=50</guid>
		<description></description>
		<content:encoded><![CDATA[I run <a title="Arch Linux" href="http://www.archlinux.org/" target="_blank">Arch Linux</a> on a computer, if I have a choice. I recently installed it on the MacBook Air my employer bought me (which saga is another post entirely). One of the things that I like about Arch is that they don't do big releases every X-period of time; the package repository is updated on a rolling basis. So I can get the latest version of whatever much sooner than my Ubuntuan brethren.

That's awesome, but also has some costs. One of those costs is that gcc gets updated for me way sooner than it does for people releasing Ruby versions and sometimes there are weird things that older releases of the compiler were more forgiving about or interpreted differently or whatever. So in order to get our app at work that we haven't yet ported to Ruby 1.9.2 to run, I need to have REE installed. This is how I got it done. This is one of those blog posts that I hope gets indexed so that the next time I have to do this and I ask Google about it, it will show me my own blog post.
<h4>Ruby-build</h4>
I like <a title="rbenv on GitHub" href="https://github.com/sstephenson/rbenv" target="_blank">rbenv</a>. A lot of people prefer <a title="RVM" href="http://beginrescueend.com/" target="_blank">rvm</a>. I don't want to get into pros and cons or whatever now, but because I use rbenv for managing multiple ruby versions, I use <a title="ruby-build on GitHub" href="https://github.com/sstephenson/ruby-build" target="_blank">ruby-build</a> to install multiple ruby versions. The way ruby-build works is by executing recipes, which are pretty simple. Here is the one I wrote to handle the install. It's just a variation on the stock REE install recipe from ruby-build.

[gist id=1732092 file=ree-1.8.7-2011.12-stdout_patch]

I won't get deep into the details, but let's start with the last 3 lines. Ruby-build executes each of these directives in turn. The first of the three sets up the compiler and the next two each take a series of arguments. The first two of those arguments are what it's installing and where to get it. Any after that (you'll have to scroll right) are telling it what to do with it, once it's downloaded it. It will run the last arguments in the order given. So that brings us to the function I added at the top: <code>build_package_stdout_patch</code>.

When you pass those ending arguments into <code>install package</code>, it will look to execute a function by the name you gave it prepended with <code>build_package_</code>. So the function I wrote downloads a patch for a bug having to do with <a title="Ruby 1.8 - Bug #5108: ruby 1.8.7 fails to build with glibc 2.14 - Ruby Issue Tracking System" href="http://bugs.ruby-lang.org/issues/5108" target="_blank">creating rogue references to STDOUT</a>, then issues the patch command to work it into the REE source. I don't know a lot about the patch command, so there's a good chance this could be done more nicely (see below). After that, it runs ruby-build's standard ree_installer task wich builds and installs the REE source.
<h4>Running It</h4>
When you're using ruby-build and rbenv together, you get a nice command called <code>rbenv install</code>. You can either pass it the name of a recipe that ruby-build already knows about or the path to a recipe on your hard drive somewhere. So, in the directory where I had saved my recipe, I ran:

[gist id=1732092 file=run_command]

Note: There's some kind of problem with tcmalloc and the newest gcc. Or something. I don't really understand, but since this is just for local development, I decided not to worry too much about performance and skip it. If you set the environment variable <code>CONFIGURE_OPTS</code>, ruby-build will pass those options along in it's build process. So off it goes to the races. Then, I get this output:


[gist id=1732092 file=output]

Pay particular attention to the last half of this. After the progress bar, patch gets confused. That's because the patch is really for Ruby 1.8.7 MRI, not REE. So it complains about not being able to find the file it wants since the projects have slightly different directory structures. You can see where I entered the correct path (basically, I just prepended the <code>source</code> directory). With that information, the patch applies cleanly, it builds REE without tcmalloc and now I have a ruby called <code>ree-1.8.7-0211.12-stdout_patch</code>. Hopefully that's helpful to someone besides me.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2012-02-03 14:43:57</wp:post_date>
		<wp:post_date_gmt>2012-02-03 20:43:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-ruby-enterprise-edition-with-ruby-install-on-arch-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="arch-linux"><![CDATA[arch linux]]></category>
		<category domain="category" nicename="os"><![CDATA[os]]></category>
		<category domain="category" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LOL Civil Liberties</title>
		<link>http://garbled.benhamill.com/2012/08/lol-civil-liberties/</link>
		<pubDate>Fri, 31 Aug 2012 06:04:40 +0000</pubDate>
		<dc:creator>benhamill</dc:creator>
		<guid isPermaLink="false">http://garbled.benhamill.com/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The other day, <a href="https://twitter.com/Carols10cents">Carol Nichols</a> <a href="https://twitter.com/Carols10cents/status/240539655211196416">linked to an interesting article</a>. It is a transcript of a <a href="http://www.nakedcapitalism.com/2012/08/john-cusack-jonathan-turley-on-obamas-constitution.html">conversation between John Cusack and Jonathan Turley about politics</a>. We traded a few tweets and I said I'd get back to her, but... tweets are short and shit is complicated and, here's a blog post. I don't generally talk a lot of politics here, but, screw it. It's my blog.</p>

<p>So, before I read the piece, Carol was talking about deciding not to vote at all for the Presidency and some stuff about not letting the good things a person has done excuse the lines they've crossed. Hopefully I'm not mischaracterizing her statements due to some misunderstanding on my part. In any case, I'd said something in reply about choosing the lesser of two evils (I don't by <strong>any</strong> means consider myself a Democrat, but the Republican party is... <em>way</em> off the rails these days). Then Carol said something I hadn't really considered: If both options have crossed a threshold of minimum-allowable-bad, then choosing the least-bad rather than demanding better enables increasing badness. So I said I'd read the article and get back to her with my thoughts.</p>

<p>Having read <a href="http://www.nakedcapitalism.com/2012/08/john-cusack-jonathan-turley-on-obamas-constitution.html">the thing</a> (you did, too, right?), I have to say I see what Carol was saying much more clearly. Surprise, surprise. The thing that stood out to me was that I'd <em>heard</em> about Obama's whole authority-to-assassinate-US-citizens thing when it came out. I heard about it and thought, "That doesn't sound right." And... then forgot about it. Or, more accurately, I filed it under "Bad Shit In The World That, Thank Eris, Doesn't Affect Me" and then got all riled up about health care and tax breaks for the rich at the expense of the rest of us, etc. How did that happen? How did I <em>let</em> that happen? Talking about how the Whitehouse has sold us ideas is <a href="http://www.goodreads.com/quotes/111920-all-statements-are-true-in-some-sense-false-in-some">true in a sense, but also false in the sense</a> that it can sound like we are actors without agency. They don't have some kind of mind control over us. I have to accept that I wasn't really looking at the world as clearly as I'd like or as I'd been telling myself I was.</p>

<p>Some stuff that's bad in the world and doesn't affect me, I can live with ignoring (I think this is only pragmatic). But some stuff should go in the other file: Not OK, Damnit. Things like Sexism, Racism, Child Abuse... and The President of the United States deciding he has the authority to unilaterally assassinate people (whether US citizens or not). Ugh. So, OK. I'm upset about that now. And also upset that I wasn't appropriately upset about it when I first learned of it. That feels like progress.</p>

<p>That issue when paired with the whole unprosecuted war crimes thing and the implications that has for mediating international interactions and Nuremberg precedents really drove Turley's question home to me: "Morally, are you comfortable with saying, ‘I know the administration is concealing war crimes, but they’re really good on healthcare?’"</p>

<p>And, you know what? That's a really depressing question to be in a position to even be <em>asked</em>. War crimes are serious shit, you know? They're the list of things that we've agreed we don't even wish on our enemies. It's the list of things that super heroes won't stoop to because "if we do, we're not better than them." They are <em>exactly</em> the stuff that we've decided the doing of differentiates the Good Guys from the Bad Guys. So if I'm OK with the POTUS doing them, or allowing them to be done or protecting those that did them, then I'm comfortable being a Bad Guy. And fuck that.</p>

<p>So, I guess we've established that I feel like there's a problem and that I'm not happy with either of the candidates put up by the US's major parties. The next question is: What do I do about it? As part of this discussion, there is the idea that voting makes you implicitly culpable and that if you refrain, you can be said to be calling for better candidates. The culpability angle, I agree with. But I'm also <em>really</em> wary of casting inaction as activism.</p>

<p>I am not an activist by nature; I've never been to a rally or demonstration. I've never occupied anything except various chairs and sofae mostly in front of video screens. I am also, by nature, physically lazy. So anything that sounds like something I'd do doesn't seem like it should count as activism. Like changing your Facebook avatar to reflect some fad cause, or writing a ranty blog post about politics (heh). So on that front, I find the "so don't vote" thing kind of... dissatisfying.</p>

<p>Also, there's a sort of game theory issue, here. And this may be an illustration of why we're all just screwed, rather than a justification for an individual's actions. But this also bugs me: If I was planning on voting for Obama (I was), and now I don't (undecided, still), then I am letting someone else decide which candidate wins. If I do vote, then I'm at least increasing the chance that the fate I've selected is the one I'll suffer. It feels very <a href="http://en.wikipedia.org/wiki/Prisoner%27s_dilema">Prisoner's Dilema</a>-ey to me. That's not an excuse, but it seems to predict that getting a low enough number of people to vote such that the parties notice there's a reason is infinitesimal.</p>

<p>Of course, on the other hand, not voting is throwing away a resource in a sort of a similar way as voting for a Democratic Presidential candidate in Texas is, so my vote or non-vote is actually pretty unlikely to affect which way my state's electoral votes go. If I lived somewhere swingey, it would matter more. I guess the decision comes a little more easily, then.</p>

<p>Anyway, I'd love your (thoughtful, respectful) comments and reactions. Especially, I'm interested in help expanding and deepening my thinking about this stuff. I'm sure there's prior art on some of these ideas that I'm unaware of.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2012-08-31 01:04:40</wp:post_date>
		<wp:post_date_gmt>2012-08-31 06:04:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lol-civil-liberties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="politics"><![CDATA[politics]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
